-- MySQL Script generated by MySQL Workbench
-- Thu Jun 28 21:44:43 2018
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='TRADITIONAL,ALLOW_INVALID_DATES';

-- -----------------------------------------------------
-- Schema paniolibre
-- -----------------------------------------------------
DROP SCHEMA IF EXISTS `paniolibre` ;

-- -----------------------------------------------------
-- Schema paniolibre
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `paniolibre` DEFAULT CHARACTER SET utf8 ;
USE `paniolibre` ;

-- -----------------------------------------------------
-- Table `paniolibre`.`Depositos`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `paniolibre`.`Depositos` (
  `id` TINYINT UNSIGNED NOT NULL AUTO_INCREMENT,
  `nombre` VARCHAR(45) NOT NULL,
  `comentario` VARCHAR(100) NULL,
  `activo` TINYINT(1) UNSIGNED NOT NULL DEFAULT 1,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `Nombre_UNIQUE` (`nombre` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `paniolibre`.`Ubicaciones`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `paniolibre`.`Ubicaciones` (
  `id` SMALLINT UNSIGNED NOT NULL AUTO_INCREMENT,
  `nombre` VARCHAR(45) NOT NULL,
  `deposito_id` TINYINT UNSIGNED NOT NULL,
  `activo` TINYINT(1) UNSIGNED NOT NULL DEFAULT 1,
  PRIMARY KEY (`id`),
  INDEX `FK_DepositoUbicacion_idx` (`deposito_id` ASC),
  CONSTRAINT `FK_DepositoUbicacion`
    FOREIGN KEY (`deposito_id`)
    REFERENCES `paniolibre`.`Depositos` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `paniolibre`.`Tecnicos`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `paniolibre`.`Tecnicos` (
  `id` SMALLINT UNSIGNED NOT NULL AUTO_INCREMENT,
  `dni` VARCHAR(45) NOT NULL,
  `nombre` VARCHAR(45) NOT NULL,
  `apellido` VARCHAR(45) NOT NULL,
  `legajo` VARCHAR(45) NOT NULL,
  `activo` TINYINT(1) UNSIGNED NOT NULL DEFAULT 1,
  `etiquetaMantis` VARCHAR(45) NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `dni_UNIQUE` (`dni` ASC),
  UNIQUE INDEX `legajo_UNIQUE` (`legajo` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `paniolibre`.`EstadosOrdenTrabajo`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `paniolibre`.`EstadosOrdenTrabajo` (
  `id` TINYINT(1) UNSIGNED NOT NULL,
  `estado` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `estado_UNIQUE` (`estado` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `paniolibre`.`Proyectos`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `paniolibre`.`Proyectos` (
  `id` TINYINT UNSIGNED NOT NULL AUTO_INCREMENT,
  `nombre` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `paniolibre`.`TiposActividad`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `paniolibre`.`TiposActividad` (
  `id` TINYINT UNSIGNED NOT NULL AUTO_INCREMENT,
  `nombre` VARCHAR(45) NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `paniolibre`.`OrdenesTrabajo`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `paniolibre`.`OrdenesTrabajo` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `idOrdenTrabajo` VARCHAR(45) NOT NULL,
  `proyecto_id` TINYINT UNSIGNED NOT NULL,
  `fechaInicio` DATETIME NOT NULL DEFAULT NOW(),
  `area` VARCHAR(45) NULL,
  `prioridad` VARCHAR(45) NULL,
  `resumen` VARCHAR(100) NOT NULL,
  `descripcion` VARCHAR(200) NOT NULL,
  `tipoActividad_id` TINYINT UNSIGNED NULL,
  `moduloSede` VARCHAR(45) NULL,
  `aulaOficina` VARCHAR(45) NULL,
  `telefonoContacto` VARCHAR(45) NULL,
  `disponibilidad` VARCHAR(45) NULL,
  `fechaUltimaModificacion` DATETIME NOT NULL DEFAULT NOW(),
  `estadoOrdenTrabajo_id` TINYINT(1) UNSIGNED NOT NULL DEFAULT 1,
  `activo` TINYINT UNSIGNED NOT NULL DEFAULT 1,
  PRIMARY KEY (`id`),
  INDEX `FK_OrdenTrabajo_Estado_idx` (`estadoOrdenTrabajo_id` ASC),
  INDEX `FK_Proyecto_OrdenTrabajo_idx` (`proyecto_id` ASC),
  INDEX `FK_TipoActividad_OrdenTrabajo_idx` (`tipoActividad_id` ASC),
  UNIQUE INDEX `idOrdenTrabajo_UNIQUE` (`idOrdenTrabajo` ASC),
  CONSTRAINT `FK_OrdenTrabajo_Estado`
    FOREIGN KEY (`estadoOrdenTrabajo_id`)
    REFERENCES `paniolibre`.`EstadosOrdenTrabajo` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `FK_Proyecto_OrdenTrabajo`
    FOREIGN KEY (`proyecto_id`)
    REFERENCES `paniolibre`.`Proyectos` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `FK_TipoActividad_OrdenTrabajo`
    FOREIGN KEY (`tipoActividad_id`)
    REFERENCES `paniolibre`.`TiposActividad` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `paniolibre`.`OrdenesTrabajoTecnicos`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `paniolibre`.`OrdenesTrabajoTecnicos` (
  `ordenTrabajo_id` INT UNSIGNED NOT NULL,
  `tecnico_id` SMALLINT UNSIGNED NOT NULL,
  PRIMARY KEY (`ordenTrabajo_id`, `tecnico_id`),
  INDEX `FK_OTT_T_idx` (`tecnico_id` ASC),
  CONSTRAINT `FK_OTT_OT`
    FOREIGN KEY (`ordenTrabajo_id`)
    REFERENCES `paniolibre`.`OrdenesTrabajo` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `FK_OTT_T`
    FOREIGN KEY (`tecnico_id`)
    REFERENCES `paniolibre`.`Tecnicos` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `paniolibre`.`CategoriasInsumos`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `paniolibre`.`CategoriasInsumos` (
  `id` SMALLINT UNSIGNED NOT NULL AUTO_INCREMENT,
  `nombre` VARCHAR(45) NOT NULL,
  `categoriaPadre` SMALLINT UNSIGNED NULL,
  `activo` TINYINT(1) NOT NULL DEFAULT 1,
  PRIMARY KEY (`id`),
  INDEX `FK_CategoriaPadre_idx` (`categoriaPadre` ASC),
  UNIQUE INDEX `Nombre_UNIQUE` (`nombre` ASC),
  CONSTRAINT `FK_CategoriaPadre`
    FOREIGN KEY (`categoriaPadre`)
    REFERENCES `paniolibre`.`CategoriasInsumos` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `paniolibre`.`UnidadesMedida`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `paniolibre`.`UnidadesMedida` (
  `id` TINYINT UNSIGNED NOT NULL,
  `nombre` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `paniolibre`.`Insumos`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `paniolibre`.`Insumos` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `codigo` VARCHAR(45) NOT NULL,
  `nombre` VARCHAR(45) NOT NULL,
  `marca` VARCHAR(45) NOT NULL,
  `categoria_id` SMALLINT UNSIGNED NOT NULL,
  `unidadMedida_id` TINYINT UNSIGNED NOT NULL,
  `comentario` VARCHAR(100) NULL,
  `umbralMinimo` INT UNSIGNED NULL,
  `activo` TINYINT(1) NOT NULL DEFAULT 1,
  PRIMARY KEY (`id`),
  INDEX `FK_CategoriaInsumo_Insumo_idx` (`categoria_id` ASC),
  INDEX `FK_UnidadMedida_Insumo_idx` (`unidadMedida_id` ASC),
  UNIQUE INDEX `codigo_UNIQUE` (`codigo` ASC),
  CONSTRAINT `FK_CategoriaInsumo_Insumo`
    FOREIGN KEY (`categoria_id`)
    REFERENCES `paniolibre`.`CategoriasInsumos` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `FK_UnidadMedida_Insumo`
    FOREIGN KEY (`unidadMedida_id`)
    REFERENCES `paniolibre`.`UnidadesMedida` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `paniolibre`.`InsumosDepositos`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `paniolibre`.`InsumosDepositos` (
  `deposito_id` TINYINT UNSIGNED NOT NULL,
  `insumo_id` INT UNSIGNED NOT NULL,
  `ubicacion_id` SMALLINT UNSIGNED NOT NULL,
  `stockNuevo` INT UNSIGNED NOT NULL DEFAULT 0,
  `stockUsado` INT UNSIGNED NOT NULL DEFAULT 0,
  `stockReservado` INT UNSIGNED NOT NULL DEFAULT 0,
  PRIMARY KEY (`deposito_id`, `insumo_id`),
  INDEX `FK_Insumo_InsumoDeposito_idx` (`insumo_id` ASC),
  INDEX `FK_Ubicacion_InsumoDeposito_idx` (`ubicacion_id` ASC),
  CONSTRAINT `FK_Deposito_InsumoDeposito`
    FOREIGN KEY (`deposito_id`)
    REFERENCES `paniolibre`.`Depositos` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `FK_Insumo_InsumoDeposito`
    FOREIGN KEY (`insumo_id`)
    REFERENCES `paniolibre`.`Insumos` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `FK_Ubicacion_InsumoDeposito`
    FOREIGN KEY (`ubicacion_id`)
    REFERENCES `paniolibre`.`Ubicaciones` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `paniolibre`.`Usuarios`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `paniolibre`.`Usuarios` (
  `id` TINYINT UNSIGNED NOT NULL AUTO_INCREMENT,
  `nombre` VARCHAR(45) NOT NULL,
  `apellido` VARCHAR(45) NOT NULL,
  `username` VARCHAR(45) NOT NULL,
  `clave` VARCHAR(100) NOT NULL,
  `email` VARCHAR(45) NOT NULL,
  `activo` TINYINT(1) UNSIGNED NOT NULL DEFAULT 1,
  `recibeAlertasPorMail` TINYINT(1) UNSIGNED NOT NULL DEFAULT 1,
  `userMantis` VARCHAR(45) NULL,
  `claveMantis` VARCHAR(100) NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `Username_UNIQUE` (`username` ASC),
  UNIQUE INDEX `Email_UNIQUE` (`email` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `paniolibre`.`Roles`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `paniolibre`.`Roles` (
  `id` TINYINT(1) UNSIGNED NOT NULL,
  `nombre` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`id`, `nombre`),
  UNIQUE INDEX `Nombre_UNIQUE` (`nombre` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `paniolibre`.`RolesUsuarios`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `paniolibre`.`RolesUsuarios` (
  `rol_id` TINYINT UNSIGNED NOT NULL,
  `usuario_id` TINYINT UNSIGNED NOT NULL,
  PRIMARY KEY (`rol_id`, `usuario_id`),
  INDEX `FK_Usuarios_RolUsuario_idx` (`usuario_id` ASC),
  CONSTRAINT `FK_Roles_RolUsuario`
    FOREIGN KEY (`rol_id`)
    REFERENCES `paniolibre`.`Roles` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `FK_Usuarios_RolUsuario`
    FOREIGN KEY (`usuario_id`)
    REFERENCES `paniolibre`.`Usuarios` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `paniolibre`.`RetirosInsumos`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `paniolibre`.`RetirosInsumos` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `usuario_id` TINYINT UNSIGNED NOT NULL,
  `deposito_id` TINYINT UNSIGNED NOT NULL DEFAULT 1,
  `insumo_id` INT UNSIGNED NOT NULL,
  `tecnico_id` SMALLINT UNSIGNED NOT NULL,
  `fecha` DATETIME NOT NULL DEFAULT NOW(),
  `ordenTrabajo_id` INT UNSIGNED NULL,
  `cantidadNuevo` INT UNSIGNED NOT NULL DEFAULT 0,
  `cantidadUsado` INT UNSIGNED NOT NULL DEFAULT 0,
  `insumoReservado` TINYINT UNSIGNED NOT NULL DEFAULT 0,
  `devuelto` TINYINT(1) NULL DEFAULT 0,
  PRIMARY KEY (`id`),
  INDEX `FK_Usuario_RetiroInsumo_idx` (`usuario_id` ASC),
  INDEX `FK_Tecnico_RetiroInsumo_idx` (`tecnico_id` ASC),
  INDEX `FK_OrdenTrabajo_RetiroInsumo_idx` (`ordenTrabajo_id` ASC),
  INDEX `FK_ID_RI_Insumo_idx` (`insumo_id` ASC),
  INDEX `FK_ID_RI_Deposito_idx` (`deposito_id` ASC),
  CONSTRAINT `FK_ID_RI_Insumo`
    FOREIGN KEY (`insumo_id`)
    REFERENCES `paniolibre`.`Insumos` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `FK_ID_RI_Deposito`
    FOREIGN KEY (`deposito_id`)
    REFERENCES `paniolibre`.`Depositos` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `FK_Usuario_RetiroInsumo`
    FOREIGN KEY (`usuario_id`)
    REFERENCES `paniolibre`.`Usuarios` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `FK_Tecnico_RetiroInsumo`
    FOREIGN KEY (`tecnico_id`)
    REFERENCES `paniolibre`.`Tecnicos` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `FK_OrdenTrabajo_RetiroInsumo`
    FOREIGN KEY (`ordenTrabajo_id`)
    REFERENCES `paniolibre`.`OrdenesTrabajo` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `paniolibre`.`DevolucionesInsumos`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `paniolibre`.`DevolucionesInsumos` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `usuario_id` TINYINT UNSIGNED NOT NULL,
  `tecnico_id` SMALLINT UNSIGNED NOT NULL,
  `ordenTrabajo_id` INT UNSIGNED NULL,
  `deposito_id` TINYINT UNSIGNED NOT NULL,
  `insumo_id` INT UNSIGNED NOT NULL,
  `cantidadNuevo` INT UNSIGNED NOT NULL DEFAULT 0,
  `cantidadUsado` INT UNSIGNED NOT NULL DEFAULT 0,
  `fecha` DATETIME NOT NULL DEFAULT NOW(),
  `retiroInsumo_id` INT UNSIGNED NOT NULL,
  PRIMARY KEY (`id`),
  INDEX `FK_paniolero_devolucionInsumo_idx` (`usuario_id` ASC),
  INDEX `FK_tecnico_devolucionInsumo_idx` (`tecnico_id` ASC),
  UNIQUE INDEX `retiroInsumo_id_UNIQUE` (`retiroInsumo_id` ASC),
  INDEX `FK_ID_DI_Insumo_idx` (`insumo_id` ASC),
  INDEX `FK_ID_DI_Deposito_idx` (`deposito_id` ASC),
  CONSTRAINT `FK_paniolero_devolucionInsumo`
    FOREIGN KEY (`usuario_id`)
    REFERENCES `paniolibre`.`Usuarios` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `FK_tecnico_devolucionInsumo`
    FOREIGN KEY (`tecnico_id`)
    REFERENCES `paniolibre`.`Tecnicos` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `FK_ID_DI_Insumo`
    FOREIGN KEY (`insumo_id`)
    REFERENCES `paniolibre`.`Insumos` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `FK_ID_DI_Deposito`
    FOREIGN KEY (`deposito_id`)
    REFERENCES `paniolibre`.`Depositos` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `FK_RI_DI_RetiroInsumoID`
    FOREIGN KEY (`retiroInsumo_id`)
    REFERENCES `paniolibre`.`RetirosInsumos` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `paniolibre`.`AjustesStock`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `paniolibre`.`AjustesStock` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `usuario_id` TINYINT UNSIGNED NOT NULL,
  `insumo_id` INT UNSIGNED NOT NULL,
  `deposito_id` TINYINT UNSIGNED NOT NULL,
  `fecha` DATETIME NOT NULL DEFAULT NOW(),
  `cantidadNuevo` INT UNSIGNED NOT NULL,
  `cantidadUsado` INT UNSIGNED NOT NULL,
  `cantidadReservado` INT UNSIGNED NOT NULL,
  PRIMARY KEY (`id`),
  INDEX `FK_Usuario_Ajuste_idx` (`usuario_id` ASC),
  INDEX `FK_ID_Insumo_idx` (`insumo_id` ASC),
  INDEX `FK_ID_Deposito_idx` (`deposito_id` ASC),
  CONSTRAINT `FK_Usuario_Ajuste`
    FOREIGN KEY (`usuario_id`)
    REFERENCES `paniolibre`.`Usuarios` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `FK_ID_Insumo`
    FOREIGN KEY (`insumo_id`)
    REFERENCES `paniolibre`.`Insumos` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `FK_ID_Deposito`
    FOREIGN KEY (`deposito_id`)
    REFERENCES `paniolibre`.`Depositos` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `paniolibre`.`TiposIngresoInsumo`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `paniolibre`.`TiposIngresoInsumo` (
  `id` TINYINT(1) UNSIGNED NOT NULL,
  `nombre` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `Nombre_UNIQUE` (`nombre` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `paniolibre`.`EstadosPedidosInsumos`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `paniolibre`.`EstadosPedidosInsumos` (
  `id` TINYINT(1) UNSIGNED NOT NULL,
  `estado` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `estado_UNIQUE` (`estado` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `paniolibre`.`PedidosInsumos`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `paniolibre`.`PedidosInsumos` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `nroOrdenCompra` INT UNSIGNED NULL,
  `proveedor` VARCHAR(45) NOT NULL,
  `fechaSolicitud` DATETIME NOT NULL DEFAULT NOW(),
  `comentario` VARCHAR(100) NULL,
  `fechaProbableRecepcion` DATETIME NOT NULL,
  `fechaRealRecepcion` DATETIME NULL,
  `estadoRecibido_id` TINYINT(1) UNSIGNED NOT NULL DEFAULT 1,
  `ordenTrabajo_id` INT UNSIGNED NULL,
  PRIMARY KEY (`id`),
  INDEX `FK_OT_PI_idx` (`ordenTrabajo_id` ASC),
  INDEX `FK_EPI_PI_idx` (`estadoRecibido_id` ASC),
  CONSTRAINT `FK_OT_PI`
    FOREIGN KEY (`ordenTrabajo_id`)
    REFERENCES `paniolibre`.`OrdenesTrabajo` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `FK_EPI_PI`
    FOREIGN KEY (`estadoRecibido_id`)
    REFERENCES `paniolibre`.`EstadosPedidosInsumos` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `paniolibre`.`IngresosInsumos`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `paniolibre`.`IngresosInsumos` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `deposito_id` TINYINT UNSIGNED NOT NULL DEFAULT 1,
  `insumo_id` INT UNSIGNED NOT NULL,
  `tipoIngreso_id` TINYINT(1) UNSIGNED NOT NULL DEFAULT 1,
  `fecha` DATETIME NOT NULL DEFAULT NOW(),
  `cantidad` INT UNSIGNED NOT NULL,
  `ordenTrabajo_id` INT UNSIGNED NULL,
  `pedidoInsumo_id` INT UNSIGNED NULL,
  `insumoReservado` TINYINT UNSIGNED NOT NULL DEFAULT 0,
  PRIMARY KEY (`id`),
  INDEX `FK_IN_TipoIngresoInsumo_id_idx` (`tipoIngreso_id` ASC),
  INDEX `FK_IN_PedidoInsumo_id_idx` (`pedidoInsumo_id` ASC),
  INDEX `FK_OrdenTrabajo_IngresoInsumo_idx` (`ordenTrabajo_id` ASC),
  INDEX `FK_InsumoDeposito_InsumoIngreso_Insumo_idx` (`insumo_id` ASC),
  INDEX `FK_InsumoDeposito_InsumoIngreso_Deposito_idx` (`deposito_id` ASC),
  CONSTRAINT `FK_TipoIngresoInsumo_IngresoInsumo`
    FOREIGN KEY (`tipoIngreso_id`)
    REFERENCES `paniolibre`.`TiposIngresoInsumo` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `FK_InsumoDeposito_InsumoIngreso_Insumo`
    FOREIGN KEY (`insumo_id`)
    REFERENCES `paniolibre`.`Insumos` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `FK_InsumoDeposito_InsumoIngreso_Deposito`
    FOREIGN KEY (`deposito_id`)
    REFERENCES `paniolibre`.`Depositos` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `FK_PedidoInsumo_IngresoInsumo`
    FOREIGN KEY (`pedidoInsumo_id`)
    REFERENCES `paniolibre`.`PedidosInsumos` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `FK_OrdenTrabajo_IngresoInsumo`
    FOREIGN KEY (`ordenTrabajo_id`)
    REFERENCES `paniolibre`.`OrdenesTrabajo` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `paniolibre`.`PedidosInsumosDetalle`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `paniolibre`.`PedidosInsumosDetalle` (
  `pedidoInsumos_id` INT UNSIGNED NOT NULL,
  `insumo_id` INT UNSIGNED NOT NULL,
  `cantidad` INT UNSIGNED NOT NULL,
  `procesado` TINYINT(1) UNSIGNED NOT NULL DEFAULT 0,
  `cantidadRecibida` INT UNSIGNED NOT NULL DEFAULT 0,
  PRIMARY KEY (`pedidoInsumos_id`, `insumo_id`),
  INDEX `FK_Insumo_PIDetalle_idx` (`insumo_id` ASC),
  CONSTRAINT `FK_PedidoInsumoDetalle_id`
    FOREIGN KEY (`pedidoInsumos_id`)
    REFERENCES `paniolibre`.`PedidosInsumos` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `FK_Insumo_PIDetalle`
    FOREIGN KEY (`insumo_id`)
    REFERENCES `paniolibre`.`Insumos` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `paniolibre`.`EstadosHerramientas`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `paniolibre`.`EstadosHerramientas` (
  `id` TINYINT UNSIGNED NOT NULL,
  `estado` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `paniolibre`.`CategoriasHerramientas`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `paniolibre`.`CategoriasHerramientas` (
  `id` SMALLINT UNSIGNED NOT NULL AUTO_INCREMENT,
  `nombre` VARCHAR(45) NOT NULL,
  `categoriaPadre` SMALLINT UNSIGNED NULL,
  `activo` TINYINT(1) NOT NULL DEFAULT 1,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `nombre_UNIQUE` (`nombre` ASC),
  INDEX `FK_CategoriaHerramientaPadre_CategoriaHerramientaHija_idx` (`categoriaPadre` ASC),
  CONSTRAINT `FK_CategoriaHerramientaPadre_CategoriaHerramientaHija`
    FOREIGN KEY (`categoriaPadre`)
    REFERENCES `paniolibre`.`CategoriasHerramientas` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `paniolibre`.`Herramientas`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `paniolibre`.`Herramientas` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `codigo` VARCHAR(45) NOT NULL,
  `marca` VARCHAR(45) NOT NULL,
  `nombre` VARCHAR(45) NOT NULL,
  `categoria_id` SMALLINT UNSIGNED NOT NULL,
  `ubicacion_id` SMALLINT UNSIGNED NOT NULL,
  `numeroActivo` VARCHAR(45) NULL,
  `mecanismoAdquisicion` VARCHAR(45) NULL,
  `fechaAdquisicion` DATETIME NULL DEFAULT NOW(),
  `proveedor` VARCHAR(45) NULL,
  `factura` VARCHAR(45) NULL,
  `fechaGarantiaExpiracion` DATETIME NULL,
  `comentario` VARCHAR(100) NULL,
  `estadoHerramienta_id` TINYINT UNSIGNED NOT NULL DEFAULT 1,
  `fechaUltimaModificacion` DATETIME NOT NULL DEFAULT NOW(),
  `activo` TINYINT(1) UNSIGNED NOT NULL DEFAULT 1,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `codigo_UNIQUE` (`codigo` ASC),
  INDEX `FK_EstadoHerramienta_Herramienta_idx` (`estadoHerramienta_id` ASC),
  INDEX `FK_CategoriaHerramienta_Herramienta_idx` (`categoria_id` ASC),
  INDEX `FK_Ubicacion_Herramienta_idx` (`ubicacion_id` ASC),
  CONSTRAINT `FK_EstadoHerramienta_Herramienta`
    FOREIGN KEY (`estadoHerramienta_id`)
    REFERENCES `paniolibre`.`EstadosHerramientas` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `FK_CategoriaHerramienta_Herramienta`
    FOREIGN KEY (`categoria_id`)
    REFERENCES `paniolibre`.`CategoriasHerramientas` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `FK_Ubicacion_Herramienta`
    FOREIGN KEY (`ubicacion_id`)
    REFERENCES `paniolibre`.`Ubicaciones` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `paniolibre`.`ReparacionesHerramientas`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `paniolibre`.`ReparacionesHerramientas` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `herramienta_id` INT UNSIGNED NOT NULL,
  `reparacionInterna` TINYINT(1) UNSIGNED NOT NULL DEFAULT 1,
  `comentarioEnvio` VARCHAR(100) NULL,
  `comentarioRecepcion` VARCHAR(100) NULL,
  `fechaEnviada` DATETIME NOT NULL DEFAULT NOW(),
  `fechaRecibida` VARCHAR(45) NULL,
  `fechaExpiracionGarantia` DATETIME NULL,
  `fechaProbableRecepcion` DATETIME NULL,
  PRIMARY KEY (`id`),
  INDEX `FK_Herramienta_Reparacion_idx` (`herramienta_id` ASC),
  CONSTRAINT `FK_Herramienta_Reparacion`
    FOREIGN KEY (`herramienta_id`)
    REFERENCES `paniolibre`.`Herramientas` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `paniolibre`.`PrestamosHerramientas`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `paniolibre`.`PrestamosHerramientas` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `usuario_id` TINYINT UNSIGNED NOT NULL,
  `tecnico_id` SMALLINT UNSIGNED NOT NULL,
  `herramienta_id` INT UNSIGNED NOT NULL,
  `ordenTrabajo_id` INT UNSIGNED NULL,
  `fechaPrestamo` DATETIME NOT NULL DEFAULT NOW(),
  `devuelto` TINYINT(1) NULL DEFAULT 0,
  PRIMARY KEY (`id`),
  INDEX `FK_Usuario_PrestamoHerramienta_idx` (`usuario_id` ASC),
  INDEX `FK_Tecnico_PrestamoHerramienta_idx` (`tecnico_id` ASC),
  INDEX `FK_Herramienta_PrestamoHerramienta_idx` (`herramienta_id` ASC),
  INDEX `FK_OrdenTrabajo_PrestamoHerramienta_idx` (`ordenTrabajo_id` ASC),
  CONSTRAINT `FK_Usuario_PrestamoHerramienta`
    FOREIGN KEY (`usuario_id`)
    REFERENCES `paniolibre`.`Usuarios` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `FK_Tecnico_PrestamoHerramienta`
    FOREIGN KEY (`tecnico_id`)
    REFERENCES `paniolibre`.`Tecnicos` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `FK_Herramienta_PrestamoHerramienta`
    FOREIGN KEY (`herramienta_id`)
    REFERENCES `paniolibre`.`Herramientas` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `FK_OrdenTrabajo_PrestamoHerramienta`
    FOREIGN KEY (`ordenTrabajo_id`)
    REFERENCES `paniolibre`.`OrdenesTrabajo` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `paniolibre`.`DevolucionesHerramientas`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `paniolibre`.`DevolucionesHerramientas` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `usuario_id` TINYINT UNSIGNED NOT NULL,
  `tecnico_id` SMALLINT UNSIGNED NOT NULL,
  `herramienta_id` INT UNSIGNED NOT NULL,
  `ordenTrabajo_id` INT UNSIGNED NULL,
  `fechaDevolucion` DATETIME NOT NULL DEFAULT NOW(),
  `estadoHerramienta_id` TINYINT UNSIGNED NOT NULL,
  `comentario` VARCHAR(45) NULL,
  PRIMARY KEY (`id`),
  INDEX `FK_Usuario_DevolucionHerramienta_idx` (`usuario_id` ASC),
  INDEX `FK_Tecnico_DevolucionHerramienta_idx` (`tecnico_id` ASC),
  INDEX `FK_Herramienta_DevolucionHerramienta_idx` (`herramienta_id` ASC),
  INDEX `FK_OrdenTrabajo_DevolucionHerramienta_idx` (`ordenTrabajo_id` ASC),
  INDEX `FK_EstadoHerramienta_DevolucionHerramienta_idx` (`estadoHerramienta_id` ASC),
  CONSTRAINT `FK_Usuario_DevolucionHerramienta`
    FOREIGN KEY (`usuario_id`)
    REFERENCES `paniolibre`.`Usuarios` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `FK_Tecnico_DevolucionHerramienta`
    FOREIGN KEY (`tecnico_id`)
    REFERENCES `paniolibre`.`Tecnicos` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `FK_Herramienta_DevolucionHerramienta`
    FOREIGN KEY (`herramienta_id`)
    REFERENCES `paniolibre`.`Herramientas` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `FK_OrdenTrabajo_DevolucionHerramienta`
    FOREIGN KEY (`ordenTrabajo_id`)
    REFERENCES `paniolibre`.`OrdenesTrabajo` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `FK_EstadoHerramienta_DevolucionHerramienta`
    FOREIGN KEY (`estadoHerramienta_id`)
    REFERENCES `paniolibre`.`EstadosHerramientas` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `paniolibre`.`Especialidades`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `paniolibre`.`Especialidades` (
  `id` SMALLINT UNSIGNED NOT NULL AUTO_INCREMENT,
  `nombre` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `nombre_UNIQUE` (`nombre` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `paniolibre`.`TecnicosxEspecialidades`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `paniolibre`.`TecnicosxEspecialidades` (
  `tecnico_id` SMALLINT UNSIGNED NOT NULL,
  `especialidad_id` SMALLINT UNSIGNED NOT NULL,
  PRIMARY KEY (`tecnico_id`, `especialidad_id`),
  INDEX `FK_Especialidad_TxE_idx` (`especialidad_id` ASC),
  CONSTRAINT `FK_Tecnico_TxE`
    FOREIGN KEY (`tecnico_id`)
    REFERENCES `paniolibre`.`Tecnicos` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `FK_Especialidad_TxE`
    FOREIGN KEY (`especialidad_id`)
    REFERENCES `paniolibre`.`Especialidades` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `paniolibre`.`Mail`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `paniolibre`.`Mail` (
  `id` TINYINT(1) UNSIGNED NOT NULL AUTO_INCREMENT,
  `mail` VARCHAR(45) NULL,
  `clave` VARCHAR(100) NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `paniolibre`.`AlertasInsumos`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `paniolibre`.`AlertasInsumos` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `deposito_id` TINYINT UNSIGNED NOT NULL,
  `insumo_id` INT UNSIGNED NOT NULL,
  `activa` TINYINT(1) UNSIGNED NOT NULL DEFAULT 1,
  `enviadoPorMail` TINYINT(1) UNSIGNED NOT NULL DEFAULT 0,
  `cantidad` INT UNSIGNED NOT NULL DEFAULT 0,
  `fecha` DATETIME NOT NULL DEFAULT NOW(),
  PRIMARY KEY (`id`),
  INDEX `FK_Deposito_AlertaInsumo_idx` (`deposito_id` ASC),
  INDEX `FK_Insumo_AlertaInsumo_idx` (`insumo_id` ASC),
  CONSTRAINT `FK_Deposito_AlertaInsumo`
    FOREIGN KEY (`deposito_id`)
    REFERENCES `paniolibre`.`Depositos` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `FK_Insumo_AlertaInsumo`
    FOREIGN KEY (`insumo_id`)
    REFERENCES `paniolibre`.`Insumos` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `paniolibre`.`AlertasPedidos`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `paniolibre`.`AlertasPedidos` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `pedidoInsumos_id` INT UNSIGNED NOT NULL,
  `fecha` DATETIME NOT NULL DEFAULT NOW(),
  `activa` TINYINT(1) UNSIGNED NOT NULL DEFAULT 1,
  `enviadoPorMail` TINYINT(1) UNSIGNED NOT NULL DEFAULT 0,
  PRIMARY KEY (`id`),
  INDEX `FK_PedidosInsumos_Alertas_idx` (`pedidoInsumos_id` ASC),
  CONSTRAINT `FK_PedidosInsumos_Alertas`
    FOREIGN KEY (`pedidoInsumos_id`)
    REFERENCES `paniolibre`.`PedidosInsumos` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `paniolibre`.`AlertasReparaciones`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `paniolibre`.`AlertasReparaciones` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `fecha` DATETIME NOT NULL DEFAULT NOW(),
  `reparacionHerramienta_id` INT UNSIGNED NOT NULL,
  `activa` TINYINT(1) UNSIGNED NOT NULL DEFAULT 1,
  `enviadoPorMail` TINYINT(1) UNSIGNED NOT NULL DEFAULT 0,
  PRIMARY KEY (`id`),
  INDEX `FK_ReparacionHerramienta_Alertas_idx` (`reparacionHerramienta_id` ASC),
  CONSTRAINT `FK_ReparacionHerramienta_Alertas`
    FOREIGN KEY (`reparacionHerramienta_id`)
    REFERENCES `paniolibre`.`ReparacionesHerramientas` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `paniolibre`.`Mantis`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `paniolibre`.`Mantis` (
  `id` TINYINT(1) UNSIGNED NOT NULL,
  `filtroNuevasId` TINYINT NULL DEFAULT 2,
  `filtroTodasId` TINYINT UNSIGNED NULL DEFAULT 3,
  `filtroResueltasId` TINYINT NULL DEFAULT 4,
  `filtroCerradasId` TINYINT NULL DEFAULT 5,
  `filtroAsignadasId` TINYINT NULL DEFAULT 6,
  `idCustomFieldTecnicos` TINYINT NULL DEFAULT 2,
  `apiUrl` VARCHAR(100) NULL DEFAULT '/api/soap/mantisconnect.php',
  `mantisPuerto` VARCHAR(45) NULL DEFAULT '80',
  `mantisIP` VARCHAR(100) NULL DEFAULT 'localhost',
  `mantisNombreApp` VARCHAR(100) NULL DEFAULT 'mantis',
  PRIMARY KEY (`id`))
ENGINE = InnoDB;

USE `paniolibre` ;

-- -----------------------------------------------------
-- Placeholder table for view `paniolibre`.`vistaCategoriasInsumos`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `paniolibre`.`vistaCategoriasInsumos` (`activo` INT, `idHijo` INT, `nombreHijo` INT, `idPadre` INT, `nombrePadre` INT, `activoPadre` INT);

-- -----------------------------------------------------
-- procedure cargarCategoriaInsumoPadre
-- -----------------------------------------------------

DELIMITER $$
USE `paniolibre`$$
CREATE PROCEDURE `cargarCategoriaInsumoPadre` 
(
	IN nombreCategoria VARCHAR(45)
)
BEGIN
	INSERT INTO CategoriasInsumos (nombre) values (TRIM(nombreCategoria));
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure cargarCategoriaInsumoHijo
-- -----------------------------------------------------

DELIMITER $$
USE `paniolibre`$$
CREATE PROCEDURE `cargarCategoriaInsumoHijo` 
(
	IN nombreCategoria VARCHAR(45),
    IN categoriaPadreId smallint unsigned 
)
BEGIN
	INSERT INTO CategoriasInsumos (nombre, categoriaPadre) 
    values (TRIM(nombreCategoria), categoriaPadreId);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure cargarDeposito
-- -----------------------------------------------------

DELIMITER $$
USE `paniolibre`$$
CREATE PROCEDURE `cargarDeposito` 
(
	IN nombreDeposito VARCHAR(45),
    IN comentarioDeposito VARCHAR(100)
)
BEGIN
	INSERT INTO Depositos (nombre, comentario) VALUES (TRIM(nombreDeposito), comentarioDeposito);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure cargarUbicacion
-- -----------------------------------------------------

DELIMITER $$
USE `paniolibre`$$
CREATE PROCEDURE `cargarUbicacion` 
(
	IN nombreUbicacion VARCHAR(45),
    IN deposito_id_ubicacion TINYINT UNSIGNED
)
BEGIN
	INSERT INTO Ubicaciones (nombre, deposito_id) values (nombreUbicacion, deposito_id_ubicacion);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure cargarInsumo
-- -----------------------------------------------------

DELIMITER $$
USE `paniolibre`$$
CREATE PROCEDURE `cargarInsumo` 
(
	IN codigoInsumo VARCHAR(45),
	IN nombreInsumo VARCHAR(45),
    IN marcaInsumo VARCHAR(45),
    IN categoria_id_insumo smallint unsigned,
    IN unidadMedida TINYINT UNSIGNED,
    IN comentarioInsumo VARCHAR(100),
    IN umbralMinimoInsumo INT UNSIGNED
)
BEGIN

    INSERT INTO Insumos(codigo,nombre,marca,categoria_id,unidadMedida_id,
						comentario,umbralminimo) 
    VALUES (TRIM(codigoInsumo),TRIM(nombreInsumo), TRIM(marcaInsumo),categoria_id_insumo,
			unidadMedida,TRIM(comentarioInsumo), umbralMinimoInsumo);
	
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure cargarUsuario
-- -----------------------------------------------------

DELIMITER $$
USE `paniolibre`$$
CREATE PROCEDURE `cargarUsuario` 
(
	IN nombreUsuario VARCHAR(45),
    IN apellidoUsuario VARCHAR(45),
    IN user VARCHAR(45),
    IN contrasenia VARCHAR(45),
    IN correo VARCHAR(45),
    IN recibe TINYINT(1),
    IN usuarioMantis VARCHAR(45),
    IN passMantis VARCHAR(100)
)
BEGIN
	INSERT INTO Usuarios (nombre, apellido, username, clave, email, recibeAlertasPorMail,userMantis,claveMantis)
    VALUES (TRIM(nombreUsuario),TRIM(apellidoUsuario),TRIM(user),contrasenia,TRIM(correo), recibe,TRIM(usuarioMantis),passMantis);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure cargarRolUsuario
-- -----------------------------------------------------

DELIMITER $$
USE `paniolibre`$$
CREATE PROCEDURE `cargarRolUsuario` 
(
	IN rol TINYINT UNSIGNED,
    IN usuario TINYINT UNSIGNED
)
BEGIN
	INSERT INTO RolesUsuarios(rol_id, usuario_id) VALUES (rol, usuario);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure cargarTecnico
-- -----------------------------------------------------

DELIMITER $$
USE `paniolibre`$$
CREATE PROCEDURE `cargarTecnico` 
(
	IN mantis VARCHAR(45),
	IN dniTecnico VARCHAR(45),
	IN nombreTecnico VARCHAR(45),
    IN apellidoTecnico VARCHAR(45),
    IN legajoTecnico VARCHAR(45)
)
BEGIN
	INSERT INTO Tecnicos (dni,nombre,apellido,legajo,etiquetaMantis) 
    VALUES (
    TRIM(dniTecnico),TRIM(nombreTecnico),TRIM(apellidoTecnico),TRIM(legajoTecnico),TRIM(mantis)
    );
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure cargarInsumoDeposito
-- -----------------------------------------------------

DELIMITER $$
USE `paniolibre`$$
CREATE PROCEDURE `cargarInsumoDeposito` 
(
	IN deposito TINYINT UNSIGNED,
    IN insumo INT UNSIGNED,
    IN ubicacion SMALLINT UNSIGNED
)
BEGIN

	INSERT INTO InsumosDepositos (deposito_id, insumo_id, ubicacion_id)
    VALUES (deposito,insumo,ubicacion);
    CALL cargarAlertaInsumo(deposito,insumo);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure cargarAjusteStock
-- -----------------------------------------------------

DELIMITER $$
USE `paniolibre`$$
CREATE PROCEDURE `cargarAjusteStock` 
(
	IN usuario TINYINT UNSIGNED,
    IN deposito TINYINT UNSIGNED,
    IN insumo INT unsigned,
    IN stockNuevo INT unsigned,
    IN stockUsado INT unsigned,
    IN stockReservado INT unsigned
)
BEGIN
	INSERT INTO AjustesStock (usuario_id,deposito_id,insumo_id,cantidadNuevo,cantidadUsado,cantidadReservado)
    VALUES (usuario,deposito,insumo,stockNuevo,stockUsado,stockReservado);
    CALL actualizarStock (deposito,insumo,stockNuevo,stockUsado,stockReservado);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure cargarDevolucionInsumo
-- -----------------------------------------------------

DELIMITER $$
USE `paniolibre`$$
CREATE PROCEDURE `cargarDevolucionInsumo` 
(
	retiro INT UNSIGNED,
	deposito TINYINT UNSIGNED,
    insumo TINYINT UNSIGNED,
	usuario TINYINT UNSIGNED,
    tecnico SMALLINT UNSIGNED,
    ot INT unsigned,
    cantNuevo INT unsigned,
    cantUsado INT unsigned
)
BEGIN
	INSERT INTO DevolucionesInsumos (retiroInsumo_id,deposito_id,insumo_id,usuario_id,tecnico_id,cantidadNuevo,cantidadUsado,ordenTrabajo_id)
		VALUES (retiro, deposito,insumo,usuario,tecnico,cantNuevo,cantUsado,ot);
    CALL aumentarStock(deposito,insumo,cantNuevo,cantUsado);
    CALL retiroDevuelto(retiro);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure cargarIngresoInsumo
-- -----------------------------------------------------

DELIMITER $$
USE `paniolibre`$$
CREATE PROCEDURE `cargarIngresoInsumo` 
(
    IN insumo INT UNSIGNED,
    IN deposito TINYINT UNSIGNED,
    IN cantIngreso INT UNSIGNED,
    IN pedidoInsumo INT unsigned
)
BEGIN
	DECLARE tipoIngreso TINYINT DEFAULT 1;
    
    IF pedidoInsumo IS NOT NULL THEN 
		SET tipoIngreso = 2;
        CALL aumentarCantidadRecibidaPedidoInsumoDetalle(pedidoInsumo,insumo,cantIngreso);
    END IF;
	INSERT INTO IngresosInsumos (tipoIngreso_id,insumo_id,deposito_id,cantidad,pedidoInsumo_id)
		VALUES (tipoIngreso,insumo,deposito,cantIngreso,pedidoInsumo);
    CALL aumentarStock(deposito,insumo,cantIngreso,0);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure cargarOrdenTrabajo
-- -----------------------------------------------------

DELIMITER $$
USE `paniolibre`$$
CREATE PROCEDURE `cargarOrdenTrabajo` 
(
	IN codigoOT VARCHAR(45),
	IN proyecto TINYINT UNSIGNED,
    IN fechaInicioOT DATETIME,
    IN areaOT VARCHAR(45),
    IN prioridadOT VARCHAR(45),
    IN resumenOT VARCHAR(100),
    IN detalleOrden VARCHAR(200),
    IN tipoActividad TINYINT UNSIGNED,
    IN modulo VARCHAR(45),
    IN aula VARCHAR(45),
    IN telefono VARCHAR(45),
    IN disponibilidadOT VARCHAR(45)
)
BEGIN
	INSERT INTO OrdenesTrabajo 
    (
		idOrdenTrabajo,
		proyecto_id,
        fechaInicio,
        area,
        prioridad,
        resumen,
        descripcion,
        tipoActividad_id,
        moduloSede,
        aulaOficina,
        telefonoContacto,
        disponibilidad
	)
    VALUES 
    (
		TRIM(codigoOT),
        proyecto,
        fechaInicioOT,
        TRIM(areaOT),
        TRIM(prioridadOT),
        TRIM(resumenOT),
        TRIM(detalleOrden),
        tipoActividad,
        TRIM(modulo),
        TRIM(aula),
        TRIM(telefono),
        TRIM(disponibilidadOT)
	);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure cargarOrdenTrabajoTecnico
-- -----------------------------------------------------

DELIMITER $$
USE `paniolibre`$$
CREATE PROCEDURE `cargarOrdenTrabajoTecnico` 
(
	IN ordenTrabajo int unsigned,
    IN tecnico smallint unsigned
)
BEGIN
	INSERT INTO OrdenesTrabajoTecnicos (ordenTrabajo_id, tecnico_id)
    VALUES (ordenTrabajo,tecnico);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure cargarRetiroInsumo
-- -----------------------------------------------------

DELIMITER $$
USE `paniolibre`$$
CREATE PROCEDURE `cargarRetiroInsumo` 
(
	IN usuario TINYINT UNSIGNED,
    IN tecnico SMALLINT UNSIGNED,
    IN cantNuevo INT UNSIGNED,
    IN cantUsado INT UNSIGNED,
    IN insumo INT UNSIGNED,
    IN deposito TINYINT UNSIGNED
)
BEGIN
	INSERT INTO RetirosInsumos (usuario_id, tecnico_id, cantidadNuevo, cantidadUsado, insumo_id, deposito_id)
		VALUES (usuario, tecnico, cantNuevo, cantUsado, insumo, deposito);
    CALL reducirStock(deposito,insumo,cantNuevo,cantUsado);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure cargarPedidoInsumo
-- -----------------------------------------------------

DELIMITER $$
USE `paniolibre`$$
CREATE PROCEDURE `cargarPedidoInsumo` 
(
	IN ordenCompra INT UNSIGNED,
    IN prov VARCHAR(45),
    IN comentarioPedido VARCHAR (100),
	IN fechaProbRecepcion DATETIME,
    IN ordenTrabajo INT UNSIGNED
)
BEGIN
	
	INSERT INTO PedidosInsumos (fechaProbableRecepcion, comentario, nroOrdenCompra,proveedor, ordenTrabajo_id)
    VALUES (fechaProbRecepcion, comentarioPedido, ordenCompra,prov, ordenTrabajo);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure cargarPedidoInsumoDetalle
-- -----------------------------------------------------

DELIMITER $$
USE `paniolibre`$$
CREATE PROCEDURE `cargarPedidoInsumoDetalle` 
(
	IN pedidoInsumo INT UNSIGNED,
    IN insumo INT UNSIGNED,
    IN cant INT UNSIGNED
)
BEGIN
	INSERT INTO PedidosInsumosDetalle (pedidoInsumos_id, insumo_id, cantidad)
    VALUES (pedidoInsumo, insumo, cant);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure aumentarStock
-- -----------------------------------------------------

DELIMITER $$
USE `paniolibre`$$
CREATE PROCEDURE `aumentarStock` 
(
	IN deposito tinyint unsigned,
    IN insumo int unsigned,
    IN cantNuevo int unsigned,
    in cantUsado int unsigned
)
BEGIN
	UPDATE InsumosDepositos 
    SET stockNuevo = stockNuevo + cantNuevo, stockUsado = stockUsado + cantUsado
    WHERE deposito_id = deposito AND insumo_id = insumo;
    CALL cargarAlertaInsumo(deposito,insumo);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure aumentarStockReservado
-- -----------------------------------------------------

DELIMITER $$
USE `paniolibre`$$
CREATE PROCEDURE `aumentarStockReservado` 
(
	IN deposito tinyint unsigned,
    IN insumo int unsigned,
    IN cantReservado int unsigned
)
BEGIN
	UPDATE InsumosDepositos 
    SET stockReservado = stockReservado + cantReservado
    WHERE deposito_id = deposito AND insumo_id = insumo;
    CALL cargarAlertaInsumo(deposito,insumo);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure actualizarStock
-- -----------------------------------------------------

DELIMITER $$
USE `paniolibre`$$
CREATE PROCEDURE `actualizarStock` 
(
	IN deposito TINYINT unsigned,
    IN insumo INT unsigned,
    IN cantNuevo INT unsigned,
    IN cantUsado INT unsigned,
    IN cantReservado INT unsigned
)
BEGIN
	UPDATE InsumosDepositos 
    SET stockNuevo = cantNuevo, stockUsado = cantUsado, stockReservado = cantReservado
    WHERE deposito_id = deposito AND insumo_id = insumo;
    CALL cargarAlertaInsumo(deposito,insumo);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure reducirStock
-- -----------------------------------------------------

DELIMITER $$
USE `paniolibre`$$
CREATE PROCEDURE `reducirStock`
(
	IN deposito tinyint unsigned,
    IN insumo int unsigned,
    IN cantNuevo int unsigned,
    in cantUsado int unsigned
)
BEGIN
	UPDATE InsumosDepositos 
    SET stockNuevo = stockNuevo - cantNuevo, stockUsado = stockUsado - cantUsado
    WHERE deposito_id = deposito AND insumo_id = insumo;
    CALL cargarAlertaInsumo(deposito,insumo);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure reducirStockReservado
-- -----------------------------------------------------

DELIMITER $$
USE `paniolibre`$$
CREATE PROCEDURE `reducirStockReservado` 
(
	IN deposito TINYINT unsigned,
    IN insumo INT unsigned,
    IN cantidadNuevo INT unsigned,
    IN cantUsado INT unsigned
)
BEGIN
	DECLARE stockReservadoActual INT unsigned;
    DECLARE stockNuevoActual INT UNSIGNED;
    
    DECLARE cantNuevo INT UNSIGNED;
    DECLARE cantReservado INT UNSIGNED;
    
    SET @cantNuevo = 0;
    SET @cantReservado = cantidadNuevo;
    
    SELECT 
		@stockNuevoActual := stockNuevo, 
		@stockReservadoActual := stockReservado 
	FROM InsumosDepositos 
	WHERE deposito_id = deposito AND insumo_id = insumo;
        
    IF @stockReservadoActual < cantidadNuevo
    THEN 
		SET @cantNuevo = cantidadNuevo - @stockReservadoActual;
		 SET @cantReservado = @stockReservadoActual;
    END IF;
    
	UPDATE InsumosDepositos 
    SET 
		stockReservado =  stockReservado - @cantReservado, 
        stockNuevo = stockNuevo - @cantNuevo, 
        stockUsado = stockUsado - cantUsado
    WHERE deposito_id = deposito AND insumo_id = insumo;
    
    CALL cargarAlertaInsumo(deposito,insumo);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure cargarRetiroInsumoReservado
-- -----------------------------------------------------

DELIMITER $$
USE `paniolibre`$$
CREATE PROCEDURE `cargarRetiroInsumoReservado` 
(
	IN usuario TINYINT UNSIGNED,
    IN tecnico SMALLINT UNSIGNED,
    IN cantNuevo INT UNSIGNED,
    IN cantUsado INT UNSIGNED,
    IN insumo INT UNSIGNED,
    IN deposito TINYINT UNSIGNED,
    IN ordenTrabajo INT UNSIGNED
)
BEGIN
	INSERT INTO RetirosInsumos (usuario_id, tecnico_id, cantidadNuevo, cantidadUsado, insumo_id, deposito_id,ordenTrabajo_id,insumoReservado)
		VALUES (usuario, tecnico, cantNuevo, cantUsado, insumo, deposito,ordenTrabajo,1);
    CALL reducirStockReservado(deposito,insumo,cantNuevo,cantUsado);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure cargarIngresoInsumoReservado
-- -----------------------------------------------------

DELIMITER $$
USE `paniolibre`$$
CREATE PROCEDURE `cargarIngresoInsumoReservado` 
(
    IN insumo INT UNSIGNED,
    IN deposito TINYINT UNSIGNED,
    IN cantIngreso INT UNSIGNED,
    IN ordenTrabajo INT unsigned,
    IN pedidoInsumo INT UNSIGNED
)
BEGIN
	IF pedidoInsumo IS NOT NULL THEN 
		CALL aumentarCantidadRecibidaPedidoInsumoDetalle(pedidoInsumo,insumo,cantIngreso);
        INSERT INTO IngresosInsumos (tipoIngreso_id,insumo_id,deposito_id,cantidad,insumoReservado,ordenTrabajo_id,pedidoInsumo_id)
		VALUES (3,insumo,deposito,cantIngreso,1,ordenTrabajo,pedidoInsumo);
    END IF;
	IF pedidoInsumo IS NULL THEN
		INSERT INTO IngresosInsumos (tipoIngreso_id,insumo_id,deposito_id,cantidad,insumoReservado,ordenTrabajo_id)
		VALUES (3,insumo,deposito,cantIngreso,1,ordenTrabajo);
	END IF;
    CALL aumentarStockReservado(deposito,insumo,cantIngreso);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure obtenerCategoriaInsumoxNombre
-- -----------------------------------------------------

DELIMITER $$
USE `paniolibre`$$
CREATE PROCEDURE `obtenerCategoriaInsumoxNombre` 
(
	IN nombreCategoria VARCHAR (45)
)
BEGIN
	SELECT * FROM CategoriasInsumos WHERE nombre = TRIM(nombreCategoria);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure obtenerUsuarioxUserName
-- -----------------------------------------------------

DELIMITER $$
USE `paniolibre`$$
CREATE PROCEDURE `obtenerUsuarioxUserName` 
(
	IN nombreUsuario VARCHAR (45)
)
BEGIN
	SELECT * FROM Usuarios WHERE username = TRIM(nombreUsuario);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure login
-- -----------------------------------------------------

DELIMITER $$
USE `paniolibre`$$
CREATE PROCEDURE `login` 
(
	IN nombreUsuario VARCHAR(45),
    IN contrasenia VARCHAR(100)
)
BEGIN
	SELECT COUNT(*) 
    FROM Usuarios 
    WHERE 
		username = TRIM(nombreUsuario) 
        AND clave = contrasenia 
        AND activo = 1;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure obtenerCategoriaInsumoxId
-- -----------------------------------------------------

DELIMITER $$
USE `paniolibre`$$
CREATE PROCEDURE `obtenerCategoriaInsumoxId` 
(
	IN idCategoria SMALLINT unsigned
)
BEGIN
	SELECT * FROM CategoriasInsumos WHERE id = idCategoria;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure obtenerUsuarioxId
-- -----------------------------------------------------

DELIMITER $$
USE `paniolibre`$$
CREATE PROCEDURE `obtenerUsuarioxId` 
(
	IN idUsuario TINYINT unsigned
)
BEGIN
	SELECT * FROM Usuarios WHERE id = idUsuario;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure obtenerTecnicoxId
-- -----------------------------------------------------

DELIMITER $$
USE `paniolibre`$$
CREATE PROCEDURE `obtenerTecnicoxId` 
(
	IN idTecnico SMALLINT unsigned
)
BEGIN
	SELECT * FROM Tecnicos WHERE id = idTecnico;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure obtenerTecnicoxNombre
-- -----------------------------------------------------

DELIMITER $$
USE `paniolibre`$$
CREATE PROCEDURE `obtenerTecnicoxNombre` 
(
	IN nombreTecnico VARCHAR(45)
)
BEGIN
	SELECT * FROM Tecnicos WHERE nombre = TRIM(nombreTecnico);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure obtenerDepositoxId
-- -----------------------------------------------------

DELIMITER $$
USE `paniolibre`$$
CREATE PROCEDURE `obtenerDepositoxId` 
(
	IN idDeposito TINYINT UNSIGNED
)
BEGIN
	SELECT * FROM Depositos WHERE id = idDeposito;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure obtenerDepositoxNombre
-- -----------------------------------------------------

DELIMITER $$
USE `paniolibre`$$
CREATE PROCEDURE `obtenerDepositoxNombre` 
(
	IN nombreDeposito VARCHAR(45)
)
BEGIN
	SELECT * FROM Depositos WHERE nombre = nombreDeposito;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure obtenerStockTotalInsumos
-- -----------------------------------------------------

DELIMITER $$
USE `paniolibre`$$
CREATE PROCEDURE `obtenerStockTotalInsumos` 
(
)
BEGIN
	SELECT Insumos.id, Insumos.nombre, Insumos.umbralMinimo, 
		SUM(InsumosDepositos.stockNuevo + InsumosDepositos.stockUsado + InsumosDepositos.stockReservado) as StockTotal
	FROM Insumos 
    INNER JOIN InsumosDepositos ON Insumos.id = InsumosDepositos.insumo_id
    WHERE Insumos.activo = 1
    group by InsumosDepositos.insumo_id;
    
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure borrarCategoriaInsumo
-- -----------------------------------------------------

DELIMITER $$
USE `paniolibre`$$
CREATE PROCEDURE `borrarCategoriaInsumo` 
(
	IN idCategoria SMALLINT UNSIGNED
)
BEGIN
	UPDATE CategoriasInsumos
    SET activo = 0
    WHERE id = idCategoria;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure borrarInsumo
-- -----------------------------------------------------

DELIMITER $$
USE `paniolibre`$$
CREATE PROCEDURE `borrarInsumo` 
(
	IN idTabla INT UNSIGNED
)
BEGIN
	UPDATE Insumos
    SET activo = 0
    WHERE id = idTabla;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure borrarUbicacion
-- -----------------------------------------------------

DELIMITER $$
USE `paniolibre`$$
CREATE PROCEDURE `borrarUbicacion` 
(
	IN idTabla SMALLINT UNSIGNED
)
BEGIN
	UPDATE Ubicaciones
    SET activo = 0
    WHERE id = idTabla;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure borrarTecnico
-- -----------------------------------------------------

DELIMITER $$
USE `paniolibre`$$
CREATE PROCEDURE `borrarTecnico` 
(
	IN idTabla SMALLINT UNSIGNED
)
BEGIN
	UPDATE Tecnicos
    SET activo = 0
    WHERE id = idTabla;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure borrarOrdenTrabajo
-- -----------------------------------------------------

DELIMITER $$
USE `paniolibre`$$
CREATE PROCEDURE `borrarOrdenTrabajo`
(
	IN idTabla INT UNSIGNED
)
BEGIN
	UPDATE OrdenesTrabajo
    SET activo = 0
    WHERE id = idTabla;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure borrarUsuario
-- -----------------------------------------------------

DELIMITER $$
USE `paniolibre`$$
CREATE PROCEDURE `borrarUsuario`
(
	IN idTabla TINYINT UNSIGNED
)
BEGIN
	UPDATE Usuarios
    SET activo = 0
    WHERE id = idTabla;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure obtenerInsumosConUmbralMinimo
-- -----------------------------------------------------

DELIMITER $$
USE `paniolibre`$$
CREATE PROCEDURE `obtenerInsumosConUmbralMinimo` 
(

)
BEGIN
	SELECT 
		Depositos.id as idDeposito, 
        Depositos.nombre as Deposito, 
        Insumos.id as idInsumo,
        Insumos.codigo as codigoInsumo,
        Insumos.nombre as Insumo,
        Insumos.umbralMinimo,
        (InsumosDepositos.stockNuevo + InsumosDepositos.stockUsado) as StockNoReservado
	FROM InsumosDepositos
	INNER JOIN Insumos ON InsumosDepositos.insumo_id = Insumos.id
	INNER JOIN Depositos ON InsumosDepositos.deposito_id = Depositos.id
	WHERE Insumos.activo = 1 AND 
    (InsumosDepositos.stockNuevo + InsumosDepositos.stockUsado) <= Insumos.umbralMinimo
    AND (InsumosDepositos.stockNuevo + InsumosDepositos.stockUsado) > 0;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure obtenerInsumosConStockCero
-- -----------------------------------------------------

DELIMITER $$
USE `paniolibre`$$
CREATE PROCEDURE `obtenerInsumosConStockCero` ()
BEGIN
SELECT 
		Depositos.id as idDeposito, 
        Depositos.nombre as Deposito, 
        Insumos.id as idInsumo, 
        Insumos.nombre as Insumo,
        Insumos.umbralMinimo,
        (InsumosDepositos.stockNuevo + InsumosDepositos.stockUsado) as StockNoReservado
FROM InsumosDepositos
	INNER JOIN Insumos ON InsumosDepositos.insumo_id = Insumos.id
	INNER JOIN Depositos ON InsumosDepositos.deposito_id = Depositos.id
WHERE Insumos.activo = 1 AND (InsumosDepositos.stockNuevo + InsumosDepositos.stockUsado) = 0;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure obtenerStockInsumos
-- -----------------------------------------------------

DELIMITER $$
USE `paniolibre`$$
CREATE PROCEDURE `obtenerStockInsumos` 
()
BEGIN
	SELECT id.insumo_id, id.deposito_id, 
			id.ubicacion_id, id.stockNuevo, 
            id.stockUsado, id.stockReservado,
            i.codigo, i.nombre as Insumo, d.nombre as Deposito, u.nombre as Ubicacion,
            i.umbralMinimo
    FROM InsumosDepositos as id
    INNER JOIN Insumos AS i ON id.insumo_id =  i.id
    INNER JOIN Ubicaciones AS u ON id.ubicacion_id = u.id
    INNER JOIN Depositos AS d ON u.deposito_id = d.id
    WHERE i.activo = 1;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure obtenerInsumoDepositoxIds
-- -----------------------------------------------------

DELIMITER $$
USE `paniolibre`$$
CREATE PROCEDURE `obtenerInsumoDepositoxIds` 
(
	IN deposito SMALLINT UNSIGNED,
    IN insumo INT UNSIGNED
)
BEGIN
	SELECT * FROM InsumosDepositos WHERE deposito_id = deposito AND insumo_id = insumo;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure obtenerInsumos
-- -----------------------------------------------------

DELIMITER $$
USE `paniolibre`$$
CREATE PROCEDURE `obtenerInsumos` 
()
BEGIN
	SELECT 
		i.id, i.codigo,i.nombre as nombreInsumo, i.marca, i.categoria_id, i.unidadMedida_id
        , i.comentario, i.umbralMinimo, i.activo, 
        c.nombre as nombreCategoria 
    FROM Insumos AS i 
		INNER JOIN CategoriasInsumos as c ON i.categoria_id = c.id;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure obtenerInsumoxId
-- -----------------------------------------------------

DELIMITER $$
USE `paniolibre`$$
CREATE PROCEDURE `obtenerInsumoxId` 
(
	IN insumo INT UNSIGNED
)
BEGIN
	SELECT 
		i.id, i.codigo,i.nombre as nombreInsumo, i.marca, i.categoria_id, i.unidadMedida_id, 
        i.cantidadUnidadMedida, i.comentario, i.umbralMinimo, i.activo, 
        c.nombre as nombreCategoria 
    FROM Insumos AS i 
		INNER JOIN CategoriasInsumos as c ON i.categoria_id = c.id
	WHERE i.id = insumo;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure editarInsumo
-- -----------------------------------------------------

DELIMITER $$
USE `paniolibre`$$
CREATE PROCEDURE `editarInsumo` 
(
	IN idInsumo INT UNSIGNED,
	IN codigoInsumo VARCHAR(45),
	IN nombreInsumo VARCHAR(45),
    IN marcaInsumo VARCHAR(45),
    IN categoria_id_insumo smallint unsigned,
    IN unidadMedida TINYINT UNSIGNED,
    IN comentarioInsumo VARCHAR(100),
    IN umbralMinimoInsumo INT UNSIGNED,
    IN activoInsumo TINYINT UNSIGNED
)
BEGIN
	UPDATE Insumos
    SET codigo = TRIM(codigoInsumo), nombre = TRIM(nombreInsumo), marca = TRIM(marcaInsumo), 
		categoria_id = categoria_id_insumo, unidadMedida_id = unidadMedida,
        comentario = TRIM(comentarioInsumo), umbralMinimo = umbralMinimoInsumo, activo = activoInsumo
	WHERE id = idInsumo;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure intercambiarUbicacionInsumo
-- -----------------------------------------------------

DELIMITER $$
USE `paniolibre`$$
CREATE PROCEDURE `intercambiarUbicacionInsumo` 
(
	IN depositoActual TINYINT UNSIGNED,
    IN insumo INT UNSIGNED,
	IN nuevaUbicacion SMALLINT UNSIGNED
    
)
BEGIN
    DECLARE deposito TINYINT UNSIGNED;
    
    Select @deposito := deposito_id
    FROM Ubicaciones
    WHERE id = nuevaUbicacion;
    
	UPDATE InsumosDepositos
    SET ubicacion_id = nuevaUbicacion, deposito_id = @deposito
    WHERE deposito_id = depositoActual AND insumo_id = insumo;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure cargarHerramienta
-- -----------------------------------------------------

DELIMITER $$
USE `paniolibre`$$
CREATE PROCEDURE `cargarHerramienta` 
(
	IN cod VARCHAR(45),
    IN marcaH VARCHAR (45),
    IN nom VARCHAR(45),
    IN categoria SMALLINT UNSIGNED,
    IN ubicacion SMALLINT UNSIGNED,
    IN activo VARCHAR(45),
    IN adquisicion VARCHAR(45),
    IN fechaAdquirida DATETIME,
    IN prov VARCHAR(45),
	IN fact VARCHAR(45),
    IN fechaGarantia DATETIME,
    IN coment VARCHAR(100)
)
BEGIN
	INSERT INTO Herramientas(codigo,marca,nombre,categoria_id,ubicacion_id,numeroActivo,
							 mecanismoAdquisicion,fechaAdquisicion,proveedor,
							 factura,fechaGarantiaExpiracion,comentario)
	VALUES(TRIM(cod),TRIM(marcaH),TRIM(nom),categoria,ubicacion,TRIM(activo),
    TRIM(adquisicion),fechaAdquirida,TRIM(prov),TRIM(fact),fechaGarantia,TRIM(coment));
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure cargarCategoriaHerramientaPadre
-- -----------------------------------------------------

DELIMITER $$
USE `paniolibre`$$
CREATE PROCEDURE `cargarCategoriaHerramientaPadre` 
(
	IN nombreCategoria VARCHAR(45)
)
BEGIN
	INSERT INTO CategoriasHerramientas (nombre) values (TRIM(nombreCategoria));
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure cargarCategoriaHerramientaHijo
-- -----------------------------------------------------

DELIMITER $$
USE `paniolibre`$$
CREATE PROCEDURE `cargarCategoriaHerramientaHijo` 
(
	IN nombreCategoria VARCHAR(45),
    IN categoriaPadreId smallint unsigned 
)
BEGIN
	INSERT INTO CategoriasHerramientas (nombre, categoriaPadre) 
    values (TRIM(nombreCategoria), categoriaPadreId);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure intercambiarUbicacionHerramienta
-- -----------------------------------------------------

DELIMITER $$
USE `paniolibre`$$
CREATE PROCEDURE `intercambiarUbicacionHerramienta` 
(
	IN actualUbicacion SMALLINT UNSIGNED,
    IN herramienta INT UNSIGNED,
	IN nuevaUbicacion SMALLINT UNSIGNED
    
)
BEGIN
	UPDATE Herramientas
    SET ubicacion_id = nuevaUbicacion
    WHERE ubicacion_id = actualUbicacion AND id = herramienta;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure obtenerCategoriasInsumosSinPadre
-- -----------------------------------------------------

DELIMITER $$
USE `paniolibre`$$
CREATE PROCEDURE `obtenerCategoriasInsumosSinPadre` ()
BEGIN
	SELECT * FROM CategoriasInsumos where CategoriasInsumos.categoriaPadre IS NULL;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure obtenerCategoriasHerramientasSinPadre
-- -----------------------------------------------------

DELIMITER $$
USE `paniolibre`$$
CREATE PROCEDURE `obtenerCategoriasHerramientasSinPadre` ()
BEGIN
	SELECT * FROM CategoriasHerramientas where categoriaPadre IS NULL;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure obtenerCategoriasInsumosSinHijos
-- -----------------------------------------------------

DELIMITER $$
USE `paniolibre`$$
CREATE PROCEDURE `obtenerCategoriasInsumosSinHijos` ()
BEGIN
	SELECT 
		c.activo, 
        c.id as idHijo, 
        c.nombre as nombreHijo, 
        cp.id as idPadre, 
        cp.nombre as nombrePadre,
        cp.activo as activoPadre
    FROM CategoriasInsumos as c
    INNER JOIN CategoriasInsumos as cp ON c.categoriaPadre = cp.id
	WHERE c.id NOT IN 
	(
		SELECT categoriaPadre 
		FROM CategoriasInsumos 
		WHERE categoriaPadre IS NOT NULL
	);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure obtenerCategoriasHerramientasSinHijos
-- -----------------------------------------------------

DELIMITER $$
USE `paniolibre`$$
CREATE PROCEDURE `obtenerCategoriasHerramientasSinHijos` ()
BEGIN
	SELECT * 
    FROM CategoriasHerramientas 
    where id NOT IN 
    (
		SELECT categoriaPadre 
        FROM CategoriasHerramientas 
        WHERE categoriaPadre IS NOT NULL
	);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure obtenerCategoriasInsumosConHijosConPadre
-- -----------------------------------------------------

DELIMITER $$
USE `paniolibre`$$
CREATE PROCEDURE `obtenerCategoriasInsumosConHijosConPadre` ()
BEGIN
	SELECT 
		c.activo, 
        c.id as idHijo, 
        c.nombre as nombreHijo, 
        cp.id as idPadre, 
        cp.nombre as nombrePadre,
        cp.activo as activoPadre
    FROM CategoriasInsumos as c
    INNER JOIN CategoriasInsumos as cp ON c.categoriaPadre = cp.id
	WHERE c.id IN 
	(
		SELECT categoriaPadre 
		FROM CategoriasInsumos 
		WHERE categoriaPadre IS NOT NULL
	) and c.categoriaPadre IS NOT NULL;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure obtenerCategoriasHerramientasConHijosConPadre
-- -----------------------------------------------------

DELIMITER $$
USE `paniolibre`$$
CREATE PROCEDURE `obtenerCategoriasHerramientasConHijosConPadre` ()
BEGIN
	SELECT * FROM CategoriasHerramientas 
	WHERE id IN 
	(
		SELECT categoriaPadre 
		FROM CategoriasHerramientas 
		WHERE categoriaPadre IS NOT NULL
	) and categoriaPadre IS NOT NULL;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure editarOrdenTrabajo
-- -----------------------------------------------------

DELIMITER $$
USE `paniolibre`$$
CREATE PROCEDURE `editarOrdenTrabajo` 
(
	IN codigoOT VARCHAR(45),
	IN proyecto TINYINT UNSIGNED,
    IN fechaInicioOT DATETIME,
    IN areaOT VARCHAR(45),
    IN prioridadOT VARCHAR(45),
    IN resumenOT VARCHAR(100),
    IN detalleOrden VARCHAR(200),
    IN tipoActividad TINYINT UNSIGNED,
    IN modulo VARCHAR(45),
    IN aula VARCHAR(45),
    IN telefono VARCHAR(45),
    IN disponibilidadOT VARCHAR(45),
    IN idOT INT UNSIGNED,
    IN estado TINYINT UNSIGNED
)
BEGIN
	UPDATE OrdenesTrabajo 
    SET idOrdenTrabajo = TRIM(codigoOT), 
    proyecto_id = proyecto, 
    fechaInicio = fechaInicioOT, 
    area = TRIM(areaOT), 
    prioridad = TRIM(prioridadOT), 
    resumen = TRIM(resumenOT), 
    descripcion = TRIM(detalleOrden), 
    tipoActividad_id = tipoActividad, 
    moduloSede = TRIM(modulo), 
    aulaOficina = TRIM(aula), 
    telefonoContacto = TRIM(telefono), 
    disponibilidad = TRIM(disponibilidadOT),
    estadoOrdenTrabajo_id = estado,
    fechaUltimaModificacion = NOW()
    WHERE id = idOT;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure obtenerOrdenesTrabajo
-- -----------------------------------------------------

DELIMITER $$
USE `paniolibre`$$
CREATE PROCEDURE `obtenerOrdenesTrabajo` ()
BEGIN
	SELECT 
		ot.id, ot.idOrdenTrabajo, ot.proyecto_id, ot.fechaInicio, ot.area, 
        ot.prioridad, ot.resumen, ot.descripcion, ot.tipoActividad_id,
        ot.moduloSede, ot.aulaOficina, ot.telefonoContacto, ot.disponibilidad,
        ot.fechaUltimaModificacion, ot.estadoOrdenTrabajo_id, ot.activo,
        p.nombre as nombreProyecto, t.nombre as nombreTipoActividad,
        e.estado as estadoOrdenTrabajo
			
    FROM OrdenesTrabajo as ot
    INNER JOIN Proyectos as p ON ot.proyecto_id = p.id
    INNER JOIN TiposActividad as t ON ot.tipoActividad_id = t.id
    INNER JOIN EstadosOrdenTrabajo as e ON ot.estadoOrdenTrabajo_id = e.id;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure obtenerOrdenTrabajoxId
-- -----------------------------------------------------

DELIMITER $$
USE `paniolibre`$$
CREATE PROCEDURE `obtenerOrdenTrabajoxId` 
(
	IN idOT INT UNSIGNED,
    IN idOrden VARCHAR(45)
)
BEGIN
	SELECT 
		ot.id, ot.idOrdenTrabajo, ot.proyecto_id, ot.fechaInicio, ot.area, 
        ot.prioridad, ot.resumen, ot.descripcion, ot.tipoActividad_id,
        ot.moduloSede, ot.aulaOficina, ot.telefonoContacto, ot.disponibilidad,
        ot.fechaUltimaModificacion, ot.estadoOrdenTrabajo_id, ot.activo,
        p.nombre as nombreProyecto, t.nombre as nombreTipoActividad,
        e.estado as estadoOrdenTrabajo
			
    FROM OrdenesTrabajo as ot
    INNER JOIN Proyectos as p ON ot.proyecto_id = p.id
    INNER JOIN TiposActividad as t ON ot.tipoActividad_id = t.id
    INNER JOIN EstadosOrdenTrabajo as e ON ot.estadoOrdenTrabajo_id = e.id
    WHERE ot.id = idOT OR ot.idOrdenTrabajo = idOrden;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure obtenerCategoriasInsumos
-- -----------------------------------------------------

DELIMITER $$
USE `paniolibre`$$
CREATE PROCEDURE `obtenerCategoriasInsumos` ()
BEGIN
	SELECT 
		c.activo, 
        c.id as idHijo, 
        c.nombre as nombreHijo, 
        cp.id as idPadre, 
        cp.nombre as nombrePadre,
        cp.activo as activoPadre
    FROM CategoriasInsumos as c
    LEFT JOIN CategoriasInsumos as cp
    ON c.categoriaPadre = cp.id;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure obtenerEspecialidadesxTecnico
-- -----------------------------------------------------

DELIMITER $$
USE `paniolibre`$$
CREATE PROCEDURE `obtenerEspecialidadesxTecnico` 
(
	IN idTec SMALLINT UNSIGNED
)
BEGIN
	SELECT 
		te.tecnico_id, 
        te.especialidad_id, 
        CONCAT(t.nombre, " ", t.apellido) as nombreTecnico, 
        e.nombre as nombreEspecialidad
	FROM Tecnicos as t
    INNER JOIN TecnicosxEspecialidades as te ON t.id = te.tecnico_id
    INNER JOIN Especialidades as e ON te.especialidad_id = e.id
    WHERE t.id = idTec;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure obtenerInsumoxCodigo
-- -----------------------------------------------------

DELIMITER $$
USE `paniolibre`$$
CREATE PROCEDURE `obtenerInsumoxCodigo` 
(
	IN codigoInsumo VARCHAR(45)
)
BEGIN
	SELECT * FROM Insumos WHERE codigo = codigoInsumo;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure obtenerRetirosInsumosPorTecnico
-- -----------------------------------------------------

DELIMITER $$
USE `paniolibre`$$
CREATE PROCEDURE `obtenerRetirosInsumosPorTecnico` 
(
	IN tecnico SMALLINT UNSIGNED
)
BEGIN
SELECT 
	r.id AS idRetiro, 
    r.usuario_id as idUsuario, u.username as Username, u.nombre as nombreUsuario, u.apellido as apellidoUsuario,
    r.deposito_id as idDeposito, d.nombre as nombreDeposito,
    r.insumo_id as idInsumo, i.codigo as codigoInsumo, i.nombre as nombreInsumo,
    r.tecnico_id as idTecnico, t.dni as dniTecnico, t.nombre as nombreTecnico, t.apellido as apellidoTecnico,
    r.ordenTrabajo_id as idOrdenTrabajo, o.idOrdenTrabajo as idOrdenTrabajoMantis, o.resumen as resumenOrdenTrabajo,
    r.fecha, r.cantidadNuevo, r.cantidadUsado, r.insumoReservado, r.devuelto
FROM RetirosInsumos as r
INNER JOIN Usuarios AS u ON r.usuario_id = u.id
INNER JOIN Insumos AS i ON r.insumo_id = i.id
INNER JOIN Depositos AS d ON r.deposito_id = d.id
INNER JOIN Tecnicos AS t ON r.tecnico_id = t.id
LEFT JOIN OrdenesTrabajo AS o ON r.ordenTrabajo_id = o.id
WHERE r.tecnico_id = tecnico AND r.devuelto = 0;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure obtenerRetirosInsumosPorOrdenTrabajo
-- -----------------------------------------------------

DELIMITER $$
USE `paniolibre`$$
CREATE PROCEDURE `obtenerRetirosInsumosPorOrdenTrabajo` 
(
	IN ot INT UNSIGNED
)
BEGIN
SELECT 
	r.id AS idRetiro, 
    r.usuario_id as idUsuario, u.username as Username, u.nombre as nombreUsuario, u.apellido as apellidoUsuario,
    r.deposito_id as idDeposito, d.nombre as nombreDeposito,
    r.insumo_id as idInsumo, i.codigo as codigoInsumo, i.nombre as nombreInsumo,
    r.tecnico_id as idTecnico, t.dni as dniTecnico, t.nombre as nombreTecnico, t.apellido as apellidoTecnico,
    r.ordenTrabajo_id as idOrdenTrabajo, o.idOrdenTrabajo as idOrdenTrabajoMantis, o.resumen as resumenOrdenTrabajo,
    r.fecha, r.cantidadNuevo, r.cantidadUsado, r.insumoReservado, r.devuelto
FROM RetirosInsumos as r
INNER JOIN Usuarios AS u ON r.usuario_id = u.id
INNER JOIN Insumos AS i ON r.insumo_id = i.id
INNER JOIN Depositos AS d ON r.deposito_id = d.id
INNER JOIN Tecnicos AS t ON r.tecnico_id = t.id
LEFT JOIN OrdenesTrabajo AS o ON r.ordenTrabajo_id = o.id
WHERE r.ordenTrabajo_id = ot AND r.devuelto = 0;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure retiroDevuelto
-- -----------------------------------------------------

DELIMITER $$
USE `paniolibre`$$
CREATE PROCEDURE `retiroDevuelto` 
(
	IN retiro INT UNSIGNED
)
BEGIN
	UPDATE RetirosInsumos 
    SET devuelto = 1
    WHERE id = retiro;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure cerrarRetirosInsumosPendientesPorOrdenTrabajo
-- -----------------------------------------------------

DELIMITER $$
USE `paniolibre`$$
CREATE PROCEDURE `cerrarRetirosInsumosPendientesPorOrdenTrabajo` 
(
	IN orden INT UNSIGNED
)
BEGIN
	UPDATE RetirosInsumos
    SET devuelto = 1
    WHERE ordenTrabajo_id = orden;
    CALL actualizarEstadoOrdenTrabajo(orden,3);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure actualizarEstadoOrdenTrabajo
-- -----------------------------------------------------

DELIMITER $$
USE `paniolibre`$$
CREATE PROCEDURE `actualizarEstadoOrdenTrabajo` 
(
	IN orden INT UNSIGNED,
	IN estado TINYINT UNSIGNED
)
BEGIN
	UPDATE OrdenesTrabajo
    SET estadoOrdenTrabajo_id = estado, fechaUltimaModificacion = NOW()
    WHERE id = orden;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure obtenerCategoriasInsumoHijasxId
-- -----------------------------------------------------

DELIMITER $$
USE `paniolibre`$$
CREATE PROCEDURE `obtenerCategoriasInsumoHijasxId` 
(
	IN idCat SMALLINT UNSIGNED
)
BEGIN
	SELECT 
		c.activo, 
        c.id as idHijo, 
        c.nombre as nombreHijo, 
        cp.id as idPadre, 
        cp.nombre as nombrePadre,
        cp.activo as activoPadre
    FROM CategoriasInsumos as c
    INNER JOIN CategoriasInsumos as cp
    ON c.categoriaPadre = cp.id
    WHERE c.categoriaPadre = idCat;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure obtenerTecnicosAsociadosAOrdenTrabajoAsignadaPorIdMantis
-- -----------------------------------------------------

DELIMITER $$
USE `paniolibre`$$
CREATE PROCEDURE `obtenerTecnicosAsociadosAOrdenTrabajoAsignadaPorIdMantis` 
(
	idMantis VARCHAR(45)
)
BEGIN
	SELECT 
		ot.id, ot.idOrdenTrabajo, ot.fechaInicio, ot.resumen, ot.descripcion,
        ot.fechaUltimaModificacion, ot.estadoOrdenTrabajo_id, ot.activo,
        tec.id as idTecnico, tec.nombre as nombreTecnico,
        e.estado as estadoOrdenTrabajo
			
    FROM OrdenesTrabajo as ot
    INNER JOIN EstadosOrdenTrabajo as e ON ot.estadoOrdenTrabajo_id = e.id
    INNER JOIN OrdenesTrabajoTecnicos as ott ON ot.id = ott.ordenTrabajo_id
    INNER JOIN Tecnicos as tec ON ott.tecnico_id = tec.id
    WHERE ot.idOrdenTrabajo = idMantis and ot.estadoOrdenTrabajo_id = 2;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure procesarPedidoInsumoDetalle
-- -----------------------------------------------------

DELIMITER $$
USE `paniolibre`$$
CREATE PROCEDURE `procesarPedidoInsumoDetalle` 
(
	IN insumo INT UNSIGNED,
    IN pedidoInsumo INT unsigned
)
BEGIN
	UPDATE PedidosInsumosDetalle
    SET procesado = 1
    WHERE pedidoInsumos_id = pedidoInsumo AND insumo_id = insumo;
    CALL desactivarAlertaPedido(pedidoInsumo);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure obtenerPedidosInsumosDetalleSinProcesar
-- -----------------------------------------------------

DELIMITER $$
USE `paniolibre`$$
CREATE PROCEDURE `obtenerPedidosInsumosDetalleSinProcesar` 
(
	IN pedido INT UNSIGNED
)
BEGIN
	SELECT pi.id as idPedido, pi.nroOrdenCompra, pi.proveedor, pi.fechaSolicitud, pi.comentario,
			pi.fechaProbableRecepcion, pi.fechaRealRecepcion, pi.recibido,
            pid.insumo_id as idInsumo, pid.cantidad, pid.procesado,
            i.codigo as codigoInsumo, i.nombre as nombreInsumo
    FROM PedidosInsumos as pi
    INNER JOIN PedidosInsumosDetalle as pid ON pi.id = pid.pedidoInsumos_id
    INNER JOIN Insumos as i ON pid.insumo_id = i.id
    WHERE pi.id = pedido AND pid.procesado = 0;
    
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure obtenerCategoriasHerramientaHijasxId
-- -----------------------------------------------------

DELIMITER $$
USE `paniolibre`$$
CREATE PROCEDURE `obtenerCategoriasHerramientaHijasxId` 
(
	IN idCat SMALLINT UNSIGNED
)
BEGIN
	SELECT 
		c.activo, 
        c.id as idHijo, 
        c.nombre as nombreHijo, 
        cp.id as idPadre, 
        cp.nombre as nombrePadre,
        cp.activo as activoPadre
    FROM CategoriasHerramientas as c
    INNER JOIN CategoriasHerramientas as cp
    ON c.categoriaPadre = cp.id
    WHERE c.categoriaPadre = idCat;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure obtenerStockInsumosPorOrdenTrabajo
-- -----------------------------------------------------

DELIMITER $$
USE `paniolibre`$$
CREATE PROCEDURE `obtenerStockInsumosPorOrdenTrabajo` 
(
	IN orden INT UNSIGNED
)
BEGIN
	SELECT id.insumo_id, id.deposito_id, 
			id.ubicacion_id, id.stockNuevo, 
            id.stockUsado, id.stockReservado,
            i.nombre as Insumo, d.nombre as Deposito, u.nombre as Ubicacion,
            i.umbralMinimo  
    FROM InsumosDepositos as id
    INNER JOIN Insumos as i ON id.insumo_id =  i.id
    INNER JOIN Depositos as d ON id.deposito_id = d.id
    INNER JOIN Ubicaciones as u ON d.id = u.deposito_id
    INNER JOIN IngresosInsumos as ii 
		ON ii.deposito_id = id.deposito_id AND 
        ii.insumo_id = id.insumo_id AND
        ii.ordenTrabajo_id = orden
    WHERE i.activo = 1;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure editarCategoriaInsumo
-- -----------------------------------------------------

DELIMITER $$
USE `paniolibre`$$
CREATE PROCEDURE `editarCategoriaInsumo` 
(
	IN idCat SMALLINT UNSIGNED,
    IN nombreCat VARCHAR(45),
    IN idCatPadre SMALLINT UNSIGNED,
	IN activoCat TINYINT(1) unsigned
)
BEGIN
	UPDATE CategoriasInsumos 
    set nombre = TRIM(nombreCat), activo = activoCat, categoriaPadre = idCatPadre 
    WHERE id = idCat;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure editarCategoriaHerramienta
-- -----------------------------------------------------

DELIMITER $$
USE `paniolibre`$$
CREATE PROCEDURE `editarCategoriaHerramienta` 
(
	IN idCat SMALLINT UNSIGNED,
    IN nombreCat VARCHAR(45),
    IN idCatPadre SMALLINT UNSIGNED,
	IN activoCat TINYINT(1) unsigned
)
BEGIN
	UPDATE CategoriasHerramientas 
    set nombre = TRIM(nombreCat), activo = activoCat, categoriaPadre = idCatPadre 
    WHERE id = idCat;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure cantidadInsumosPorCategoriaId
-- -----------------------------------------------------

DELIMITER $$
USE `paniolibre`$$
CREATE PROCEDURE `cantidadInsumosPorCategoriaId` 
(
	IN categoria SMALLINT UNSIGNED
)
BEGIN
	SELECT COUNT(*) as cantidad
    FROM Insumos
    WHERE categoria_id = categoria;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure cantidadHerramientasPorCategoriaId
-- -----------------------------------------------------

DELIMITER $$
USE `paniolibre`$$
CREATE PROCEDURE `cantidadHerramientasPorCategoriaId` 
(
	IN categoria SMALLINT UNSIGNED
)
BEGIN
	SELECT COUNT(*) as cantidad
    FROM Insumos
    WHERE categoria_id = categoria;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure obtenerCategoriaHerramientaxNombre
-- -----------------------------------------------------

DELIMITER $$
USE `paniolibre`$$
CREATE PROCEDURE `obtenerCategoriaHerramientaxNombre` 
(
	IN nombreCategoria VARCHAR (45)
)
BEGIN
	SELECT * FROM CategoriasHerramientas WHERE nombre = TRIM(nombreCategoria);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure obtenerUltimoDevolucionHerramientaPorIdHerramienta
-- -----------------------------------------------------

DELIMITER $$
USE `paniolibre`$$
CREATE PROCEDURE `obtenerUltimoDevolucionHerramientaPorIdHerramienta` 
(
	IN idHerramienta INT UNSIGNED
)
BEGIN
	SELECT *
    FROM DevolucionesHerramientas
    WHERE herramienta_id = idHerramienta
    ORDER BY id desc
    limit 1;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure obtenerIdReparacionHerramienta
-- -----------------------------------------------------

DELIMITER $$
USE `paniolibre`$$
CREATE PROCEDURE `obtenerIdReparacionHerramienta` 
(
	IN idHerramienta INT UNSIGNED
)
BEGIN
	SELECT *
    FROM ReparacionesHerramientas
    WHERE herramienta_id = idHerramienta
    ORDER BY id DESC
    LIMIT 1;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure actualizarEstadoPedido
-- -----------------------------------------------------

DELIMITER $$
USE `paniolibre`$$
CREATE PROCEDURE `actualizarEstadoPedido` 
(
	IN idPedido INT UNSIGNED,
    IN idEstadoPedido TINYINT UNSIGNED
)
BEGIN
	UPDATE PedidosInsumos
    SET estadoRecepcion_id = idEstadoPedido
    WHERE id = idPedido;
    
    CALL desactivarAlertaPedido(idPedido);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure aumentarCantidadRecibidaPedidoInsumoDetalle
-- -----------------------------------------------------

DELIMITER $$
USE `paniolibre`$$
CREATE PROCEDURE `aumentarCantidadRecibidaPedidoInsumoDetalle` 
(
	IN idPedido INT UNSIGNED,
    IN idInsumo INT UNSIGNED,
    IN cantRecibida INT UNSIGNED
)
BEGIN
	UPDATE PedidosInsumosDetalle
    SET cantidadRecibida = cantidadRecibida + cantRecibida
    WHERE pedidoInsumos_id = idPedido AND insumo_id = idInsumo;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure obtenerPedidosInsumosPendientesYParciales
-- -----------------------------------------------------

DELIMITER $$
USE `paniolibre`$$
CREATE PROCEDURE `obtenerPedidosInsumosPendientesYParciales` ()
BEGIN
	SELECT *
    FROM PedidosInsumos
    WHERE estadoRecepcion_id = 1 OR estadoRecepcion_id = 2;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure obtenerPedidosInsumosDetalleXIdPedido
-- -----------------------------------------------------

DELIMITER $$
USE `paniolibre`$$
CREATE PROCEDURE `obtenerPedidosInsumosDetalleXIdPedido` 
(
	IN pedido INT UNSIGNED
)
BEGIN
	SELECT *
    FROM PedidosInsumosDetalle
    WHERE pedidoInsumos_id = pedido and procesado = 0;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure editarMail
-- -----------------------------------------------------

DELIMITER $$
USE `paniolibre`$$
CREATE PROCEDURE `editarMail` 
(
	IN mailNuevo VARCHAR(45),
    IN claveNueva VARCHAR(100)
)
BEGIN
	UPDATE Mail
    SET mail = mailNuevo, clave = claveNueva
    WHERE id = 1;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure obtenerHerramientasMasPrestadas
-- -----------------------------------------------------

DELIMITER $$
USE `paniolibre`$$
CREATE PROCEDURE `obtenerHerramientasMasPrestadas` 
(
	IN categoriaHerramienta INT UNSIGNED, 
    IN fechaInicio DATE, 
    IN fechaFin DATE
)
BEGIN
	SELECT 
		chPadre.id AS idCategoriaPadre, chPadre.nombre AS nombreCategoriaPadre, 
        chHijo.id AS idCategoriaHijo, chHijo.nombre AS nombreCategoriaHijo, 
		h.codigo , h.nombre AS 'nombre_Herramienta' ,
		t.nombre AS 'nombre_Tecnico',
        count(*) AS 'cantidad' 
	FROM PrestamosHerramientas AS ph
    INNER JOIN Tecnicos AS t ON ph.tecnico_id = t.id
    INNER JOIN Herramientas AS h on ph.herramienta_id = h.id 
    INNER JOIN CategoriasHerramientas AS chPadre ON chPadre.id = h.categoria_id
    LEFT JOIN CategoriasHerramientas AS chHijo ON chHijo.categoriaPadre = chPadre.id
	WHERE ph.fechaPrestamo >= fechaInicio AND 
        ph.fechaPrestamo <= fechaFin AND ( 
        chPadre.id =  categoriaHerramienta )
	GROUP BY h.nombre , t.nombre, chHijo.id, chPadre.id;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure obtenerInsumosMasPrestadas
-- -----------------------------------------------------

DELIMITER $$
USE `paniolibre`$$
CREATE PROCEDURE `obtenerInsumosMasPrestadas` 
(
	IN categoriaInsumo INT UNSIGNED, 
    IN fechaInicio date , 
    IN fechaFin date
)
BEGIN
	SELECT 	ciPadre.id as idCategoriaPadre, ciPadre.nombre as nombreCategoriaPadre, 
			ciHijo.id as idCategoriaHijo, ciHijo.nombre as nombreCategoriaHijo, 
    i.codigo, i.nombre as 'nombre_Insumo', t.nombre as 'nombre_Tecnico' , COUNT(*) as 'cantidad' ,
        SUM( ri.cantidadNuevo + ri.cantidadUsado + ri.insumoReservado) as 'cantidad_Retirada'
	FROM RetirosInsumos AS ri 
    INNER JOIN Tecnicos AS t ON ri.tecnico_id = t.id
    INNER JOIN Insumos AS i ON ri.insumo_id = i.id
    INNER JOIN CategoriasInsumos AS ciPadre ON ciPadre.id = i.categoria_id
    LEFT JOIN CategoriasInsumos AS ciHijo ON ciHijo.categoriaPadre = ciPadre.id
  WHERE ri.fecha >= fechaInicio AND ri.fecha <= fechaFin 
  AND (ciPadre.id =  categoriaInsumo)
  GROUP BY i.nombre , t.nombre, ciHijo.id, ciPadre.id;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure obtenerOrdenesDeTrabajoReporte
-- -----------------------------------------------------

DELIMITER $$
USE `paniolibre`$$
CREATE PROCEDURE `obtenerOrdenesDeTrabajoReporte`
(
    IN fechaInicio date , 
    IN fechaFin date,
    IN estadoNueva TINYINT UNSIGNED,
    IN estadoAsignada TINYINT UNSIGNED,
    IN estadoRealizada TINYINT UNSIGNED,
    IN estadoCerrada TINYINT UNSIGNED,
    IN estadoSuspendida TINYINT UNSIGNED
)
BEGIN
	DECLARE nueva TINYINT UNSIGNED;
    DECLARE asignada TINYINT UNSIGNED;
    DECLARE realizada TINYINT UNSIGNED;
    DECLARE cerrada TINYINT UNSIGNED;
    DECLARE suspendida TINYINT UNSIGNED;
    
    SET @nueva = 0;
    SET @asignada = 0;
    SET @realizada = 0;
    SET @cerrada = 0;
    SET @suspendida = 0;
    
    IF estadoNueva > 0 THEN 
		SET @nueva = 1; 
	END IF;
    IF estadoAsignada > 0 THEN 
		SET @asignada = 2; 
	END IF;
    IF estadoRealizada > 0 THEN 
		SET @realizada = 3; 
	END IF;
    IF estadoCerrada > 0 THEN 
		SET @cerrada = 4; 
	END IF;
	IF estadoSuspendida > 0 THEN 
		SET @suspendida = 5; 
	END IF;
    
    IF ( 
		(estadoNueva = 0 ) AND 
		(estadoAsignada = 0 ) AND
		(estadoRealizada = 0 ) AND 
        (estadoCerrada = 0 ) AND
        (estadoSuspendida = 0 )
	) THEN
	SELECT
		eot.estado,
		ot.fechaInicio, ot.fechaUltimaModificacion, 
        ot.idOrdenTrabajo, ot.resumen, p.nombre
	FROM 
		OrdenesTrabajo AS ot
        INNER JOIN Proyectos AS p ON ot.proyecto_id = p.id
        INNER JOIN EstadosOrdenTrabajo as eot ON ot.estadoOrdenTrabajo_id = eot.id
	WHERE ot.fechaUltimaModificacion >= fechaInicio 
		AND ot.fechaUltimaModificacion <= fechaFin;
        
	ELSE
		SELECT eot.estado,
		ot.fechaInicio, ot.fechaUltimaModificacion, 
        ot.idOrdenTrabajo, ot.resumen, p.nombre
	FROM 
		OrdenesTrabajo AS ot
        INNER JOIN Proyectos AS p ON ot.proyecto_id = p.id
        INNER JOIN EstadosOrdenTrabajo as eot ON ot.estadoOrdenTrabajo_id = eot.id
	WHERE ot.fechaUltimaModificacion >= fechaInicio 
		AND ot.fechaUltimaModificacion <= fechaFin
        AND ( 
        ot.estadoOrdenTrabajo_id = @nueva OR
        ot.estadoOrdenTrabajo_id = @asignada OR
        ot.estadoOrdenTrabajo_id = @realizada OR
        ot.estadoOrdenTrabajo_id = @cerrada OR
        ot.estadoOrdenTrabajo_id = @suspendida
        );
	END IF;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure cargarAlertaInsumo
-- -----------------------------------------------------

DELIMITER $$
USE `paniolibre`$$
CREATE PROCEDURE `cargarAlertaInsumo` 
(
	IN deposito TINYINT UNSIGNED,
    IN insumo INT UNSIGNED
)
BEGIN
	DECLARE umbral INT UNSIGNED;
    DECLARE idAlerta INT UNSIGNED;
    DECLARE cantidadActual INT UNSIGNED;
    
    SET @cantidadActual = 0;
    
    SELECT @umbral:= umbralMinimo
    FROM Insumos
    WHERE id = insumo;
	
    SELECT @idAlerta:= id
    FROM AlertasInsumos
    WHERE deposito_id = deposito AND insumo_id = insumo
    ORDER BY id DESC
    LIMIT 1;
    
    IF @idAlerta IS NOT NULL THEN
		UPDATE AlertasInsumos
        SET activa = 0, enviadoPorMail = 1
        WHERE @idAlerta = id;
	END IF;
    
    SELECT @cantidadActual := (stockNuevo + stockUsado)
    FROM InsumosDepositos
    WHERE deposito_id = deposito AND insumo_id = insumo;
    
    IF @cantidadActual <= @umbral THEN
		INSERT INTO AlertasInsumos (deposito_id, insumo_id, cantidad)
		VALUES (deposito, insumo, @cantidadActual);
	END IF;
    
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure enviarAlertaInsumo
-- -----------------------------------------------------

DELIMITER $$
USE `paniolibre`$$
CREATE PROCEDURE `enviarAlertaInsumo` 
(
	IN idAlerta INT UNSIGNED
)
BEGIN
	UPDATE AlertasInsumos
    SET enviadoPorMail = 1
    WHERE id = idAlerta;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure obtenerAlertasInsumos
-- -----------------------------------------------------

DELIMITER $$
USE `paniolibre`$$
CREATE PROCEDURE `obtenerAlertasInsumos` 
(

)
BEGIN
	SELECT 
		ai.id as idAlerta, ai.enviadoPorMail, ai.cantidad, ai.fecha, ai.activa,
        d.id as idDeposito, d.nombre as nombreDeposito,
        i.id as idInsumo, i.codigo as codigoInsumo, i.nombre as nombreInsumo, i.umbralMinimo
    FROM AlertasInsumos as ai
    INNER JOIN Depositos as d ON ai.deposito_id = d.id
    INNER JOIN Insumos as i ON ai.insumo_id = i.id
    WHERE ai.activa = 1;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure cargarAlertaPedido
-- -----------------------------------------------------

DELIMITER $$
USE `paniolibre`$$
CREATE PROCEDURE `cargarAlertaPedido` 
(
	IN pedido INT UNSIGNED
)
BEGIN
	
    DECLARE idAlerta INT UNSIGNED;
    SET @idAlerta = 0;
    
    SELECT @idAlerta := id
    FROM AlertasPedidos
    WHERE pedidoInsumos_id = pedido
    ORDER BY id DESC
    LIMIT 1;
    
    IF @idAlerta > 0 THEN
		UPDATE AlertasPedidos
        SET activa = 0, enviadoPorMail = 1
        WHERE id = @idAlerta;
    END IF;
    
	INSERT INTO AlertaPedidos (pedidoInsumos_id)
    VALUES (pedido);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure cargarAlertaReparacionHerramienta
-- -----------------------------------------------------

DELIMITER $$
USE `paniolibre`$$
CREATE PROCEDURE `cargarAlertaReparacionHerramienta` 
(
	IN reparacion INT UNSIGNED
)
BEGIN
	
    DECLARE idAlerta INT UNSIGNED;

    SELECT @idAlerta := id
    FROM AlertasReparaciones
    WHERE reparacionHerramienta_id = reparacion
    ORDER BY id DESC
    LIMIT 1;

    IF @idAlerta IS NULL THEN
		INSERT INTO AlertasReparaciones (reparacionHerramienta_id)
		VALUES (reparacion);
    END IF;
    
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure desactivarAlertaPedido
-- -----------------------------------------------------

DELIMITER $$
USE `paniolibre`$$
CREATE PROCEDURE `desactivarAlertaPedido` 
(
	IN pedido INT UNSIGNED
)
BEGIN
	
    DECLARE idAlerta INT UNSIGNED;
    SET @idAlerta = 0;
    
    SELECT @idAlerta := id
    FROM AlertasPedidos
    WHERE pedidoInsumos_id = pedido
    ORDER BY id DESC
    LIMIT 1;
    
    IF @idAlerta > 0 THEN
		UPDATE AlertasPedidos
        SET activa = 0, enviadoPorMail = 1
        WHERE id = @idAlerta;
    END IF;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure desactivarAlertaReparacionHerramienta
-- -----------------------------------------------------

DELIMITER $$
USE `paniolibre`$$
CREATE PROCEDURE `desactivarAlertaReparacionHerramienta` 
(
	IN herramienta INT UNSIGNED
)
BEGIN
	
    DECLARE idAlerta INT UNSIGNED;
    SET @idAlerta = 0;
    
    SELECT @idAlerta := id
    FROM AlertasReparaciones
    WHERE herramienta_id = herramienta
    ORDER BY id DESC
    LIMIT 1;
    
    IF @idAlerta > 0 THEN
		UPDATE AlertasReparaciones
        SET activa = 0, enviadoPorMail = 1
        WHERE id = @idAlerta;
    END IF;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure actualizarFechaEstadoPedido
-- -----------------------------------------------------

DELIMITER $$
USE `paniolibre`$$
CREATE PROCEDURE `actualizarFechaEstadoPedido`
(
	IN estado TINYINT UNSIGNED,
    IN pedido INT UNSIGNED,
    IN fecha DATETIME
)
BEGIN
	UPDATE PedidosInsumos 
    SET estadoRecibido_id = estado, fechaRealRecepcion = fecha
    WHERE PedidosInsumos.id = pedido;
    CALL desactivarAlertaPedido(pedido);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure enviarAlertaPedido
-- -----------------------------------------------------

DELIMITER $$
USE `paniolibre`$$
CREATE PROCEDURE `enviarAlertaPedido` 
(
	IN idAlerta INT UNSIGNED
)
BEGIN
	UPDATE AlertasPedidos
    SET enviadoPorMail = 1
    WHERE id = idAlerta;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure enviarAlertaReparacion
-- -----------------------------------------------------

DELIMITER $$
USE `paniolibre`$$
CREATE PROCEDURE `enviarAlertaReparacion` 
(
	IN idAlerta INT UNSIGNED
)
BEGIN
	UPDATE AlertasReparaciones
    SET enviadoPorMail = 1
    WHERE id = idAlerta;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure actualizarEstadoHerramienta
-- -----------------------------------------------------

DELIMITER $$
USE `paniolibre`$$
CREATE PROCEDURE `actualizarEstadoHerramienta` 
(
	IN herramienta INT UNSIGNED,
    IN estado TINYINT UNSIGNED
)
BEGIN
	UPDATE Herramientas 
    SET 
		estadoHerramienta_id = estado, 
		fechaUltimaModificacion = NOW() 
	WHERE Herramientas.id = herramienta;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure actualizarReparacionHerramienta
-- -----------------------------------------------------

DELIMITER $$
USE `paniolibre`$$
CREATE PROCEDURE `actualizarReparacionHerramienta` 
(
	IN comentario VARCHAR(100),
    IN fecRecibida DATETIME,
    IN fecExpGarantia DATETIME,
    IN idReparacion INT UNSIGNED
)
BEGIN
    UPDATE ReparacionesHerramientas 
    SET 
		comentarioRecepcion = comentario, 
		fechaRecibida = fecRecibida,
        fechaExpiracionGarantia = fecExpGarantia 
	WHERE id = idReparacion;
    
    CALL desactivarAlertaReparacionHerramienta(idReparacion);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure obtenerAlertasReparaciones
-- -----------------------------------------------------

DELIMITER $$
USE `paniolibre`$$
CREATE PROCEDURE `obtenerAlertasReparaciones` ()
BEGIN
	SELECT 
		ar.id as idAlerta, ar.fecha as fechaAlerta, ar.enviadoPorMail, ar.activa,
		h.id as idHerramienta, h.codigo as codigoHerramienta, h.nombre as nombreHerramienta,
        rh.comentarioEnvio, rh.fechaEnviada, rh.fechaProbableRecepcion
    FROM AlertasReparaciones as ar 
    INNER JOIN ReparacionesHerramientas as rh ON rh.id = ar.reparacionHerramienta_id
    INNER JOIN Herramientas as h ON rh.herramienta_id = h.id
    WHERE ar.activa = 1;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure cargarReparacionExterna
-- -----------------------------------------------------

DELIMITER $$
USE `paniolibre`$$
CREATE PROCEDURE `cargarReparacionExterna` 
(
	IN herramienta INT UNSIGNED,
    IN commentEnvio VARCHAR(100),
    IN fechaProbRecepcion DATETIME
)
BEGIN
	INSERT INTO ReparacionesHerramientas
		(herramienta_id, reparacionInterna, fechaProbableRecepcion)
	VALUES (herramienta, 0, fechaProbRecepcion);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure obtenerReparacionesExternasNoRecibidas
-- -----------------------------------------------------

DELIMITER $$
USE `paniolibre`$$
CREATE PROCEDURE `obtenerReparacionesExternasNoRecibidas` 
(
)
BEGIN
	SELECT *
    FROM ReparacionesHerramientas
    WHERE 
		reparacionInterna = 0 AND
        fechaRecibida IS NULL AND
        fechaProbableRecepcion < NOW();
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure obtenerAlertasPedidos
-- -----------------------------------------------------

DELIMITER $$
USE `paniolibre`$$
CREATE PROCEDURE `obtenerAlertasPedidos` ()
BEGIN
	SELECT ap.id as idAlerta, ap.fecha, ap.enviadoPorMail,
    pi.nroOrdenCompra, pi.proveedor, pi.fechaSolicitud, pi.comentario, pi.fechaProbableRecepcion
    FROM AlertasPedidos as ap
    INNER JOIN PedidosInsumos as pi ON ap.pedidoInsumos_id = pi.id
    WHERE ap.activa = 1;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure obtenerPrimerRetiroInsumo
-- -----------------------------------------------------

DELIMITER $$
USE `paniolibre`$$
CREATE PROCEDURE `obtenerPrimerRetiroInsumo` ()
BEGIN
	SELECT *
    FROM RetirosInsumos 
    ORDER BY id ASC
    LIMIT 1;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure obtenerUltimoRetiroInsumo
-- -----------------------------------------------------

DELIMITER $$
USE `paniolibre`$$
CREATE PROCEDURE `obtenerUltimoRetiroInsumo` ()
BEGIN
	SELECT *
    FROM RetirosInsumos 
    ORDER BY id DESC
    LIMIT 1;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure obtenerPrimerPrestamoHerramienta
-- -----------------------------------------------------

DELIMITER $$
USE `paniolibre`$$
CREATE PROCEDURE `obtenerPrimerPrestamoHerramienta` ()
BEGIN
	SELECT *
    FROM PrestamosHerramientas 
    ORDER BY id ASC
    LIMIT 1;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure obtenerUltimoPrestamoHerramienta
-- -----------------------------------------------------

DELIMITER $$
USE `paniolibre`$$
CREATE PROCEDURE `obtenerUltimoPrestamoHerramienta` ()
BEGIN
	SELECT *
    FROM PrestamosHerramientas 
    ORDER BY id DESC
    LIMIT 1;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure obtenerPrimerOrdenDeTrabajo
-- -----------------------------------------------------

DELIMITER $$
USE `paniolibre`$$
CREATE PROCEDURE `obtenerPrimerOrdenDeTrabajo` ()
BEGIN
	SELECT *
    FROM ordenestrabajo 
    ORDER BY id ASC
    LIMIT 1;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure obtenerUbicaciones
-- -----------------------------------------------------

DELIMITER $$
USE `paniolibre`$$
CREATE PROCEDURE `obtenerUbicaciones` ()
BEGIN
	SELECT 
		u.id AS idUbicacion, u.nombre AS nombreUbicacion, u.activo,
        d.id AS idDeposito, d.nombre AS nombreDeposito, d.comentario
    FROM Ubicaciones as u
    INNER JOIN Depositos as d ON u.deposito_id = d.id
    WHERE u.activo = 1;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure obtenerOrdenDeTrabajoSinDevolucionesPendientes
-- -----------------------------------------------------

DELIMITER $$
USE `paniolibre`$$
CREATE PROCEDURE `obtenerOrdenDeTrabajoSinDevolucionesPendientes` 
(
	IN idMantis VARCHAR(45)
)
BEGIN
	SELECT *
    FROM OrdenesTrabajo AS ot
    LEFT JOIN RetirosInsumos AS ri ON ot.id = ri.ordenTrabajo_id AND ri.devuelto = 1
    LEFT JOIN PrestamosHerramientas AS ph ON ot.id = ph.ordenTrabajo_id AND ph.devuelto = 1
    WHERE ot.idOrdenTrabajo = idMantis;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure cargarConfiguracionMantis
-- -----------------------------------------------------

DELIMITER $$
USE `paniolibre`$$
CREATE PROCEDURE `cargarConfiguracionMantis` 
(
	IN mantisPuertosp VARCHAR(100),
    IN mantisIPsp VARCHAR(100),
    IN mantisNombreAppsp VARCHAR(100)
)
BEGIN
		UPDATE Mantis
        SET 
            mantisPuerto = mantisPuertosp, mantisIP = mantisIPsp, 
            mantisNombreApp = mantisNombreAppsp
		WHERE id = 1;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- View `paniolibre`.`vistaCategoriasInsumos`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `paniolibre`.`vistaCategoriasInsumos`;
USE `paniolibre`;
CREATE  OR REPLACE VIEW `vistaCategoriasInsumos` AS 
SELECT 
		c.activo, 
        c.id as idHijo, 
        c.nombre as nombreHijo, 
        cp.id as idPadre, 
        cp.nombre as nombrePadre,
        cp.activo as activoPadre
    FROM CategoriasInsumos as c
    LEFT JOIN CategoriasInsumos as cp
    ON c.categoriaPadre = cp.id;

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
